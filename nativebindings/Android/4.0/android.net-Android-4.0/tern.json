{
  "android": {
    "net": {
      "VpnService": {
        "!url": "http://developer.android.com/reference/android/net/VpnService.html",
        "!type": "fn()",
        "Builder": {
          "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html",
          "!type": "fn()",
          "prototype": {
            "addAllowedApplication": {
              "!type": "fn(packageName: string) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addAllowedApplication(java.lang.String)"
            },
            "setUnderlyingNetworks": {
              "!type": "fn(networks: +java.newArray) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#setUnderlyingNetworks(android.net.Network[])"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "setBlocking": {
              "!type": "fn(blocking: bool) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#setBlocking(boolean)"
            },
            "setConfigureIntent": {
              "!type": "fn(intent: +android.app.PendingIntent) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#setConfigureIntent(android.app.PendingIntent)"
            },
            "addSearchDomain": {
              "!type": "fn(domain: string) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addSearchDomain(java.lang.String)"
            },
            "setSession": {
              "!type": "fn(session: string) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#setSession(java.lang.String)"
            },
            "addDnsServer": {
              "!type": "fn(address: +java.net.InetAddress) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addDnsServer(java.net.InetAddress)"
            },
            "setMtu": {
              "!type": "fn(mtu: number) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#setMtu(int)"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "addAddress": {
              "!type": "fn(address: +java.net.InetAddress, prefixLength: number) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addAddress(java.net.InetAddress, int)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "allowBypass": {
              "!type": "fn() -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#allowBypass()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "allowFamily": {
              "!type": "fn(family: number) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#allowFamily(int)"
            },
            "addRoute": {
              "!type": "fn(address: +java.net.InetAddress, prefixLength: number) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addRoute(java.net.InetAddress, int)"
            },
            "addDisallowedApplication": {
              "!type": "fn(packageName: string) -> +android.net.VpnService.Builder",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#addDisallowedApplication(java.lang.String)"
            },
            "establish": {
              "!type": "fn() -> +android.os.ParcelFileDescriptor",
              "!url": "http://developer.android.com/reference/android/net/VpnService.Builder.html#establish()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            }
          }
        },
        "BIND_WAIVE_PRIORITY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY"
        },
        "MEDIA_PROJECTION_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE"
        },
        "ETHERNET_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#ETHERNET_SERVICE"
        },
        "WIFI_RTT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WIFI_RTT_SERVICE"
        },
        "SENSOR_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE"
        },
        "TELEPHONY_SUBSCRIPTION_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TELEPHONY_SUBSCRIPTION_SERVICE"
        },
        "CAPTIONING_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CAPTIONING_SERVICE"
        },
        "START_CONTINUATION_MASK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_CONTINUATION_MASK"
        },
        "CAMERA_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CAMERA_SERVICE"
        },
        "BIND_DEBUG_UNBIND": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND"
        },
        "STATUS_BAR_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#STATUS_BAR_SERVICE"
        },
        "DEVICE_POLICY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#DEVICE_POLICY_SERVICE"
        },
        "BIND_IMPORTANT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT"
        },
        "NSD_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NSD_SERVICE"
        },
        "DOWNLOAD_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE"
        },
        "BIND_NOT_VISIBLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_NOT_VISIBLE"
        },
        "CONTEXT_IGNORE_SECURITY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONTEXT_IGNORE_SECURITY"
        },
        "USAGE_STATS_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#USAGE_STATS_SERVICE"
        },
        "START_FLAG_RETRY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_FLAG_RETRY"
        },
        "MODE_WORLD_READABLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_WORLD_READABLE"
        },
        "KEYGUARD_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE"
        },
        "BIND_ADJUST_WITH_ACTIVITY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY"
        },
        "UI_MODE_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#UI_MODE_SERVICE"
        },
        "MODE_PRIVATE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE"
        },
        "CONTEXT_INCLUDE_CODE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONTEXT_INCLUDE_CODE"
        },
        "ACCESSIBILITY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#ACCESSIBILITY_SERVICE"
        },
        "HDMI_CONTROL_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#HDMI_CONTROL_SERVICE"
        },
        "BIND_SHOWING_UI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_SHOWING_UI"
        },
        "MODE_APPEND": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_APPEND"
        },
        "AUDIO_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#AUDIO_SERVICE"
        },
        "NETWORK_SCORE_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NETWORK_SCORE_SERVICE"
        },
        "UPDATE_LOCK_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#UPDATE_LOCK_SERVICE"
        },
        "MEDIA_ROUTER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE"
        },
        "JOB_SCHEDULER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#JOB_SCHEDULER_SERVICE"
        },
        "DEVICE_IDLE_CONTROLLER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#DEVICE_IDLE_CONTROLLER"
        },
        "INPUT_METHOD_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#INPUT_METHOD_SERVICE"
        },
        "BIND_ABOVE_CLIENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT"
        },
        "START_STICKY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_STICKY"
        },
        "INPUT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE"
        },
        "MODE_WORLD_WRITEABLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_WORLD_WRITEABLE"
        },
        "NETWORKMANAGEMENT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NETWORKMANAGEMENT_SERVICE"
        },
        "WINDOW_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WINDOW_SERVICE"
        },
        "SERVICE_INTERFACE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/VpnService.html#SERVICE_INTERFACE"
        },
        "MEDIA_SESSION_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MEDIA_SESSION_SERVICE"
        },
        "WIFI_P2P_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WIFI_P2P_SERVICE"
        },
        "MODE_ENABLE_WRITE_AHEAD_LOGGING": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_ENABLE_WRITE_AHEAD_LOGGING"
        },
        "WIFI_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WIFI_SERVICE"
        },
        "PERSISTENT_DATA_BLOCK_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#PERSISTENT_DATA_BLOCK_SERVICE"
        },
        "TV_INPUT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TV_INPUT_SERVICE"
        },
        "SIP_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#SIP_SERVICE"
        },
        "FINGERPRINT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE"
        },
        "LOCATION_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#LOCATION_SERVICE"
        },
        "LAUNCHER_APPS_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#LAUNCHER_APPS_SERVICE"
        },
        "NETWORK_STATS_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NETWORK_STATS_SERVICE"
        },
        "VOICE_INTERACTION_MANAGER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#VOICE_INTERACTION_MANAGER_SERVICE"
        },
        "TELECOM_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TELECOM_SERVICE"
        },
        "SEARCH_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#SEARCH_SERVICE"
        },
        "RADIO_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#RADIO_SERVICE"
        },
        "BIND_VISIBLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_VISIBLE"
        },
        "BIND_NOT_FOREGROUND": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND"
        },
        "CONTEXT_RESTRICTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONTEXT_RESTRICTED"
        },
        "USER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#USER_SERVICE"
        },
        "DROPBOX_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE"
        },
        "BIND_TREAT_LIKE_ACTIVITY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_TREAT_LIKE_ACTIVITY"
        },
        "BIND_FOREGROUND_SERVICE_WHILE_AWAKE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_FOREGROUND_SERVICE_WHILE_AWAKE"
        },
        "CLIPBOARD_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CLIPBOARD_SERVICE"
        },
        "START_TASK_REMOVED_COMPLETE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_TASK_REMOVED_COMPLETE"
        },
        "LAYOUT_INFLATER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#LAYOUT_INFLATER_SERVICE"
        },
        "WIFI_SCANNING_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WIFI_SCANNING_SERVICE"
        },
        "PRINT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#PRINT_SERVICE"
        },
        "WALLPAPER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WALLPAPER_SERVICE"
        },
        "ALARM_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#ALARM_SERVICE"
        },
        "ACCOUNT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#ACCOUNT_SERVICE"
        },
        "TRUST_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TRUST_SERVICE"
        },
        "VIBRATOR_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#VIBRATOR_SERVICE"
        },
        "START_REDELIVER_INTENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_REDELIVER_INTENT"
        },
        "NFC_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NFC_SERVICE"
        },
        "NOTIFICATION_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NOTIFICATION_SERVICE"
        },
        "BLUETOOTH_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE"
        },
        "POWER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#POWER_SERVICE"
        },
        "BIND_ALLOW_OOM_MANAGEMENT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT"
        },
        "START_FLAG_REDELIVERY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_FLAG_REDELIVERY"
        },
        "BACKUP_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BACKUP_SERVICE"
        },
        "COUNTRY_DETECTOR": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#COUNTRY_DETECTOR"
        },
        "SERIAL_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#SERIAL_SERVICE"
        },
        "WIFI_PASSPOINT_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#WIFI_PASSPOINT_SERVICE"
        },
        "CONSUMER_IR_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE"
        },
        "APP_OPS_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE"
        },
        "ACTIVITY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#ACTIVITY_SERVICE"
        },
        "STORAGE_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE"
        },
        "BIND_FOREGROUND_SERVICE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_FOREGROUND_SERVICE"
        },
        "RESTRICTIONS_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#RESTRICTIONS_SERVICE"
        },
        "CONNECTIVITY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_SERVICE"
        },
        "START_NOT_STICKY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_NOT_STICKY"
        },
        "TEXT_SERVICES_MANAGER_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TEXT_SERVICES_MANAGER_SERVICE"
        },
        "USB_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#USB_SERVICE"
        },
        "START_STICKY_COMPATIBILITY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/app/Service.html#START_STICKY_COMPATIBILITY"
        },
        "APPWIDGET_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#APPWIDGET_SERVICE"
        },
        "CONTEXT_REGISTER_PACKAGE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CONTEXT_REGISTER_PACKAGE"
        },
        "CARRIER_CONFIG_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#CARRIER_CONFIG_SERVICE"
        },
        "NETWORK_POLICY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#NETWORK_POLICY_SERVICE"
        },
        "MIDI_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MIDI_SERVICE"
        },
        "BATTERY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BATTERY_SERVICE"
        },
        "MODE_MULTI_PROCESS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS"
        },
        "BIND_AUTO_CREATE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE"
        },
        "DISPLAY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE"
        },
        "TELEPHONY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/content/Context.html#TELEPHONY_SERVICE"
        },
        "prepareAndAuthorize": {
          "!type": "fn(context: +android.content.Context) -> void",
          "!url": "http://developer.android.com/reference/android/net/VpnService.html#prepareAndAuthorize(android.content.Context)"
        },
        "prepare": {
          "!type": "fn(context: +android.content.Context) -> +android.content.Intent",
          "!url": "http://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)"
        },
        "prototype": {
          "getExternalCacheDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getExternalCacheDir()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "openFileInput": {
            "!type": "fn(name: string) -> +java.io.FileInputStream",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#openFileInput(java.lang.String)"
          },
          "getBaseContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getBaseContext()"
          },
          "checkPermission": {
            "!type": "fn(permission: string, pid: number, uid: number) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkPermission(java.lang.String, int, int)"
          },
          "openFileOutput": {
            "!type": "fn(name: string, mode: number) -> +java.io.FileOutputStream",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#openFileOutput(java.lang.String, int)"
          },
          "deleteDatabase": {
            "!type": "fn(name: string) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#deleteDatabase(java.lang.String)"
          },
          "startActivityAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startActivityAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "getOpPackageName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getOpPackageName()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "getObbDirs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getObbDirs()"
          },
          "startForeground": {
            "!type": "fn(id: number, notification: +android.app.Notification) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#startForeground(int, android.app.Notification)"
          },
          "getString": {
            "!type": "fn(resId: number) -> string",
            "!url": "http://developer.android.com/reference/android/content/Context.html#getString(int)"
          },
          "getDatabasePath": {
            "!type": "fn(name: string) -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getDatabasePath(java.lang.String)"
          },
          "sendOrderedBroadcast": {
            "!type": "fn(intent: +android.content.Intent, receiverPermission: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendOrderedBroadcast(android.content.Intent, java.lang.String)"
          },
          "stopForeground": {
            "!type": "fn(removeNotification: bool) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#stopForeground(boolean)"
          },
          "onDestroy": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onDestroy()"
          },
          "protect": {
            "!type": "fn(socket: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#protect(int)"
          },
          "bindServiceAsUser": {
            "!type": "fn(service: +android.content.Intent, conn: +android.content.ServiceConnection, flags: number, user: +android.os.UserHandle) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
          },
          "getNoBackupFilesDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getNoBackupFilesDir()"
          },
          "fileList": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#fileList()"
          },
          "bindService": {
            "!type": "fn(service: +android.content.Intent, conn: +android.content.ServiceConnection, flags: number) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#bindService(android.content.Intent, android.content.ServiceConnection, int)"
          },
          "checkSelfPermission": {
            "!type": "fn(permission: string) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkSelfPermission(java.lang.String)"
          },
          "removeStickyBroadcast": {
            "!type": "fn(intent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#removeStickyBroadcast(android.content.Intent)"
          },
          "sendStickyBroadcastAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "removeAddress": {
            "!type": "fn(address: +java.net.InetAddress, prefixLength: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#removeAddress(java.net.InetAddress, int)"
          },
          "setForeground": {
            "!type": "fn(isForeground: bool) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#setForeground(boolean)"
          },
          "stopSelf": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#stopSelf()"
          },
          "enforceCallingPermission": {
            "!type": "fn(permission: string, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingPermission(java.lang.String, java.lang.String)"
          },
          "getCacheDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getCacheDir()"
          },
          "getSharedPrefsFile": {
            "!type": "fn(name: string) -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getSharedPrefsFile(java.lang.String)"
          },
          "deleteFile": {
            "!type": "fn(name: string) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#deleteFile(java.lang.String)"
          },
          "createApplicationContext": {
            "!type": "fn(application: +android.content.pm.ApplicationInfo, flags: number) -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#createApplicationContext(android.content.pm.ApplicationInfo, int)"
          },
          "getExternalFilesDirs": {
            "!type": "fn(type: string) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getExternalFilesDirs(java.lang.String)"
          },
          "isRestricted": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#isRestricted()"
          },
          "startInstrumentation": {
            "!type": "fn(className: +android.content.ComponentName, profileFile: string, arguments: +android.os.Bundle) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)"
          },
          "createPackageContext": {
            "!type": "fn(packageName: string, flags: number) -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#createPackageContext(java.lang.String, int)"
          },
          "obtainStyledAttributes": {
            "!type": "fn(attrs: +java.newArray) -> +android.content.res.TypedArray",
            "!url": "http://developer.android.com/reference/android/content/Context.html#obtainStyledAttributes(int[])"
          },
          "setWallpaper": {
            "!type": "fn(bitmap: +android.graphics.Bitmap) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#setWallpaper(android.graphics.Bitmap)"
          },
          "setTheme": {
            "!type": "fn(resid: number) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#setTheme(int)"
          },
          "sendStickyOrderedBroadcast": {
            "!type": "fn(intent: +android.content.Intent, resultReceiver: +android.content.BroadcastReceiver, scheduler: +android.os.Handler, initialCode: number, initialData: string, initialExtras: +android.os.Bundle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)"
          },
          "enforcePermission": {
            "!type": "fn(permission: string, pid: number, uid: number, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforcePermission(java.lang.String, int, int, java.lang.String)"
          },
          "getDir": {
            "!type": "fn(name: string, mode: number) -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getDir(java.lang.String, int)"
          },
          "checkCallingOrSelfUriPermission": {
            "!type": "fn(uri: +android.net.Uri, modeFlags: number) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingOrSelfUriPermission(android.net.Uri, int)"
          },
          "sendBroadcastMultiplePermissions": {
            "!type": "fn(intent: +android.content.Intent, receiverPermissions: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendBroadcastMultiplePermissions(android.content.Intent, java.lang.String[])"
          },
          "getExternalFilesDir": {
            "!type": "fn(type: string) -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getExternalFilesDir(java.lang.String)"
          },
          "openOrCreateDatabase": {
            "!type": "fn(name: string, mode: number, factory: +android.database.sqlite.SQLiteDatabase.CursorFactory) -> +android.database.sqlite.SQLiteDatabase",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory)"
          },
          "getContentResolver": {
            "!type": "fn() -> +android.content.ContentResolver",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getContentResolver()"
          },
          "getThemeResId": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getThemeResId()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getObbDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getObbDir()"
          },
          "getDisplayAdjustments": {
            "!type": "fn(displayId: number) -> +android.view.DisplayAdjustments",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getDisplayAdjustments(int)"
          },
          "checkCallingOrSelfPermission": {
            "!type": "fn(permission: string) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingOrSelfPermission(java.lang.String)"
          },
          "unregisterReceiver": {
            "!type": "fn(receiver: +android.content.BroadcastReceiver) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#unregisterReceiver(android.content.BroadcastReceiver)"
          },
          "clearWallpaper": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#clearWallpaper()"
          },
          "createPackageContextAsUser": {
            "!type": "fn(packageName: string, flags: number, user: +android.os.UserHandle) -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#createPackageContextAsUser(java.lang.String, int, android.os.UserHandle)"
          },
          "onTaskRemoved": {
            "!type": "fn(rootIntent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onTaskRemoved(android.content.Intent)"
          },
          "onCreate": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onCreate()"
          },
          "onLowMemory": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onLowMemory()"
          },
          "startServiceAsUser": {
            "!type": "fn(service: +android.content.Intent, user: +android.os.UserHandle) -> +android.content.ComponentName",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startServiceAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getWallpaper": {
            "!type": "fn() -> +android.graphics.drawable.Drawable",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaper()"
          },
          "peekWallpaper": {
            "!type": "fn() -> +android.graphics.drawable.Drawable",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#peekWallpaper()"
          },
          "getApplicationContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getApplicationContext()"
          },
          "getFilesDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getFilesDir()"
          },
          "getCodeCacheDir": {
            "!type": "fn() -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getCodeCacheDir()"
          },
          "sendOrderedBroadcastAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle, receiverPermission: string, resultReceiver: +android.content.BroadcastReceiver, scheduler: +android.os.Handler, initialCode: number, initialData: string, initialExtras: +android.os.Bundle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)"
          },
          "getColor": {
            "!type": "fn(id: number) -> number",
            "!url": "http://developer.android.com/reference/android/content/Context.html#getColor(int)"
          },
          "registerReceiverAsUser": {
            "!type": "fn(receiver: +android.content.BroadcastReceiver, user: +android.os.UserHandle, filter: +android.content.IntentFilter, broadcastPermission: string, scheduler: +android.os.Handler) -> +android.content.Intent",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler)"
          },
          "getText": {
            "!type": "fn(resId: number) -> +java.lang.CharSequence",
            "!url": "http://developer.android.com/reference/android/content/Context.html#getText(int)"
          },
          "getMainLooper": {
            "!type": "fn() -> +android.os.Looper",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getMainLooper()"
          },
          "addAddress": {
            "!type": "fn(address: +java.net.InetAddress, prefixLength: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#addAddress(java.net.InetAddress, int)"
          },
          "startActivity": {
            "!type": "fn(intent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startActivity(android.content.Intent)"
          },
          "getColorStateList": {
            "!type": "fn(id: number) -> +android.content.res.ColorStateList",
            "!url": "http://developer.android.com/reference/android/content/Context.html#getColorStateList(int)"
          },
          "enforceCallingOrSelfUriPermission": {
            "!type": "fn(uri: +android.net.Uri, modeFlags: number, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)"
          },
          "getAssets": {
            "!type": "fn() -> +android.content.res.AssetManager",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getAssets()"
          },
          "onConfigurationChanged": {
            "!type": "fn(newConfig: +android.content.res.Configuration) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onConfigurationChanged(android.content.res.Configuration)"
          },
          "onStart": {
            "!type": "fn(intent: +android.content.Intent, startId: number) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onStart(android.content.Intent, int)"
          },
          "onTrimMemory": {
            "!type": "fn(level: number) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onTrimMemory(int)"
          },
          "onStartCommand": {
            "!type": "fn(intent: +android.content.Intent, flags: number, startId: number) -> number",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onStartCommand(android.content.Intent, int, int)"
          },
          "grantUriPermission": {
            "!type": "fn(toPackage: string, uri: +android.net.Uri, modeFlags: number) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#grantUriPermission(java.lang.String, android.net.Uri, int)"
          },
          "canStartActivityForResult": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#canStartActivityForResult()"
          },
          "getBasePackageName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getBasePackageName()"
          },
          "onUnbind": {
            "!type": "fn(intent: +android.content.Intent) -> bool",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onUnbind(android.content.Intent)"
          },
          "attach": {
            "!type": "fn(context: +android.content.Context, thread: +android.app.ActivityThread, className: string, token: +android.os.IBinder, application: +android.app.Application, activityManager: +java.lang.Object) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#attach(android.content.Context, android.app.ActivityThread, java.lang.String, android.os.IBinder, android.app.Application, java.lang.Object)"
          },
          "onBind": {
            "!type": "fn(intent: +android.content.Intent) -> +android.os.IBinder",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#onBind(android.content.Intent)"
          },
          "getApplication": {
            "!type": "fn() -> +android.app.Application",
            "!url": "http://developer.android.com/reference/android/app/Service.html#getApplication()"
          },
          "onRevoke": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#onRevoke()"
          },
          "registerReceiver": {
            "!type": "fn(receiver: +android.content.BroadcastReceiver, filter: +android.content.IntentFilter) -> +android.content.Intent",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "stopService": {
            "!type": "fn(name: +android.content.Intent) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#stopService(android.content.Intent)"
          },
          "getWallpaperDesiredMinimumHeight": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumHeight()"
          },
          "getExternalCacheDirs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getExternalCacheDirs()"
          },
          "getTheme": {
            "!type": "fn() -> +android.content.res.Resources.Theme",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getTheme()"
          },
          "setUnderlyingNetworks": {
            "!type": "fn(networks: +java.newArray) -> bool",
            "!url": "http://developer.android.com/reference/android/net/VpnService.html#setUnderlyingNetworks(android.net.Network[])"
          },
          "getPackageCodePath": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getPackageCodePath()"
          },
          "registerComponentCallbacks": {
            "!type": "fn(callback: +android.content.ComponentCallbacks) -> void",
            "!url": "http://developer.android.com/reference/android/content/Context.html#registerComponentCallbacks(android.content.ComponentCallbacks)"
          },
          "enforceUriPermission": {
            "!type": "fn(uri: +android.net.Uri, pid: number, uid: number, modeFlags: number, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)"
          },
          "getSystemServiceName": {
            "!type": "fn(serviceClass: +java.lang.Class) -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getSystemServiceName(java.lang.Class)"
          },
          "getApplicationInfo": {
            "!type": "fn() -> +android.content.pm.ApplicationInfo",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getApplicationInfo()"
          },
          "createDisplayContext": {
            "!type": "fn(display: +android.view.Display) -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#createDisplayContext(android.view.Display)"
          },
          "getSharedPreferences": {
            "!type": "fn(name: string, mode: number) -> +android.content.SharedPreferences",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getSharedPreferences(java.lang.String, int)"
          },
          "enforceCallingUriPermission": {
            "!type": "fn(uri: +android.net.Uri, modeFlags: number, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingUriPermission(android.net.Uri, int, java.lang.String)"
          },
          "stopSelfResult": {
            "!type": "fn(startId: number) -> bool",
            "!url": "http://developer.android.com/reference/android/app/Service.html#stopSelfResult(int)"
          },
          "getSystemService": {
            "!type": "fn(name: string) -> +java.lang.Object",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getSystemService(java.lang.String)"
          },
          "unbindService": {
            "!type": "fn(conn: +android.content.ServiceConnection) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#unbindService(android.content.ServiceConnection)"
          },
          "sendStickyOrderedBroadcastAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle, resultReceiver: +android.content.BroadcastReceiver, scheduler: +android.os.Handler, initialCode: number, initialData: string, initialExtras: +android.os.Bundle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getClassLoader": {
            "!type": "fn() -> +java.lang.ClassLoader",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getClassLoader()"
          },
          "databaseList": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#databaseList()"
          },
          "checkCallingUriPermission": {
            "!type": "fn(uri: +android.net.Uri, modeFlags: number) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingUriPermission(android.net.Uri, int)"
          },
          "enforceCallingOrSelfPermission": {
            "!type": "fn(permission: string, message: string) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#enforceCallingOrSelfPermission(java.lang.String, java.lang.String)"
          },
          "createConfigurationContext": {
            "!type": "fn(overrideConfiguration: +android.content.res.Configuration) -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#createConfigurationContext(android.content.res.Configuration)"
          },
          "removeStickyBroadcastAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "getFileStreamPath": {
            "!type": "fn(name: string) -> +java.io.File",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getFileStreamPath(java.lang.String)"
          },
          "checkUriPermission": {
            "!type": "fn(uri: +android.net.Uri, pid: number, uid: number, modeFlags: number) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkUriPermission(android.net.Uri, int, int, int)"
          },
          "onRebind": {
            "!type": "fn(intent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/app/Service.html#onRebind(android.content.Intent)"
          },
          "startService": {
            "!type": "fn(service: +android.content.Intent) -> +android.content.ComponentName",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startService(android.content.Intent)"
          },
          "checkCallingPermission": {
            "!type": "fn(permission: string) -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#checkCallingPermission(java.lang.String)"
          },
          "getPackageManager": {
            "!type": "fn() -> +android.content.pm.PackageManager",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getPackageManager()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "startActivitiesAsUser": {
            "!type": "fn(intents: +java.newArray, options: +android.os.Bundle, userHandle: +android.os.UserHandle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle)"
          },
          "sendBroadcastAsUser": {
            "!type": "fn(intent: +android.content.Intent, user: +android.os.UserHandle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "sendBroadcast": {
            "!type": "fn(intent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendBroadcast(android.content.Intent)"
          },
          "getPackageResourcePath": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getPackageResourcePath()"
          },
          "startIntentSender": {
            "!type": "fn(intent: +android.content.IntentSender, fillInIntent: +android.content.Intent, flagsMask: number, flagsValues: number, extraFlags: number) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)"
          },
          "startActivityForResult": {
            "!type": "fn(who: string, intent: +android.content.Intent, requestCode: number, options: +android.os.Bundle) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startActivityForResult(java.lang.String, android.content.Intent, int, android.os.Bundle)"
          },
          "startActivities": {
            "!type": "fn(intents: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#startActivities(android.content.Intent[])"
          },
          "getDrawable": {
            "!type": "fn(id: number) -> +android.graphics.drawable.Drawable",
            "!url": "http://developer.android.com/reference/android/content/Context.html#getDrawable(int)"
          },
          "getPackageName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getPackageName()"
          },
          "revokeUriPermission": {
            "!type": "fn(uri: +android.net.Uri, modeFlags: number) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#revokeUriPermission(android.net.Uri, int)"
          },
          "getUserId": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getUserId()"
          },
          "unregisterComponentCallbacks": {
            "!type": "fn(callback: +android.content.ComponentCallbacks) -> void",
            "!url": "http://developer.android.com/reference/android/content/Context.html#unregisterComponentCallbacks(android.content.ComponentCallbacks)"
          },
          "getResources": {
            "!type": "fn() -> +android.content.res.Resources",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getResources()"
          },
          "stopServiceAsUser": {
            "!type": "fn(name: +android.content.Intent, user: +android.os.UserHandle) -> bool",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#stopServiceAsUser(android.content.Intent, android.os.UserHandle)"
          },
          "sendStickyBroadcast": {
            "!type": "fn(intent: +android.content.Intent) -> void",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#sendStickyBroadcast(android.content.Intent)"
          },
          "getExternalMediaDirs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getExternalMediaDirs()"
          },
          "getWallpaperDesiredMinimumWidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/content/ContextWrapper.html#getWallpaperDesiredMinimumWidth()"
          }
        }
      },
      "IpReachabilityMonitor": {
        "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html",
        "!type": "fn(ifName: string, callback: +android.net.IpReachabilityMonitor.Callback)",
        "probeNeighbor": {
          "!type": "fn(ifIndex: number, ip: +java.net.InetAddress) -> bool",
          "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html#probeNeighbor(int, java.net.InetAddress)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "updateLinkProperties": {
            "!type": "fn(lp: +android.net.LinkProperties) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html#updateLinkProperties(android.net.LinkProperties)"
          },
          "clearLinkProperties": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html#clearLinkProperties()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "stop": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html#stop()"
          },
          "probeAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpReachabilityMonitor.html#probeAll()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "DnsPinger": {
        "!url": "http://developer.android.com/reference/android/net/DnsPinger.html",
        "!type": "fn(context: +android.content.Context, TAG: string, looper: +android.os.Looper, target: +android.os.Handler, connectionType: number)",
        "TIMEOUT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#TIMEOUT"
        },
        "SOCKET_EXCEPTION": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#SOCKET_EXCEPTION"
        },
        "DNS_PING_RESULT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#DNS_PING_RESULT"
        },
        "prototype": {
          "getLooper": {
            "!type": "fn() -> +android.os.Looper",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getLooper()"
          },
          "sendEmptyMessage": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessage(int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "handleMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#handleMessage(android.os.Message)"
          },
          "removeCallbacksAndMessages": {
            "!type": "fn(token: +java.lang.Object) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacksAndMessages(java.lang.Object)"
          },
          "hasCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasCallbacks(java.lang.Runnable)"
          },
          "sendMessage": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessage(android.os.Message)"
          },
          "removeCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacks(java.lang.Runnable)"
          },
          "getDnsList": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#getDnsList()"
          },
          "cancelPings": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#cancelPings()"
          },
          "dump": {
            "!type": "fn(pw: +android.util.Printer, prefix: string) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#dump(android.util.Printer, java.lang.String)"
          },
          "removeMessages": {
            "!type": "fn(what: number) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeMessages(int)"
          },
          "hasMessages": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasMessages(int)"
          },
          "runWithScissors": {
            "!type": "fn(r: +java.lang.Runnable, timeout: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#runWithScissors(java.lang.Runnable, long)"
          },
          "postDelayed": {
            "!type": "fn(r: +java.lang.Runnable, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long)"
          },
          "dispatchMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#dispatchMessage(android.os.Message)"
          },
          "pingDnsAsync": {
            "!type": "fn(dns: +java.net.InetAddress, timeout: number, delay: number) -> number",
            "!url": "http://developer.android.com/reference/android/net/DnsPinger.html#pingDnsAsync(java.net.InetAddress, int, int)"
          },
          "obtainMessage": {
            "!type": "fn() -> +android.os.Message",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#obtainMessage()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "sendEmptyMessageDelayed": {
            "!type": "fn(what: number, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageDelayed(int, long)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getMessageName": {
            "!type": "fn(message: +android.os.Message) -> string",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getMessageName(android.os.Message)"
          },
          "sendMessageAtTime": {
            "!type": "fn(msg: +android.os.Message, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtTime(android.os.Message, long)"
          },
          "postAtTime": {
            "!type": "fn(r: +java.lang.Runnable, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtTime(java.lang.Runnable, long)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "sendEmptyMessageAtTime": {
            "!type": "fn(what: number, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageAtTime(int, long)"
          },
          "post": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#post(java.lang.Runnable)"
          },
          "sendMessageDelayed": {
            "!type": "fn(msg: +android.os.Message, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageDelayed(android.os.Message, long)"
          },
          "sendMessageAtFrontOfQueue": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtFrontOfQueue(android.os.Message)"
          },
          "postAtFrontOfQueue": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtFrontOfQueue(java.lang.Runnable)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "LinkProperties": {
        "!url": "http://developer.android.com/reference/android/net/LinkProperties.html",
        "!type": "fn()",
        "CompareResult": {
          "!url": "http://developer.android.com/reference/android/net/LinkProperties.CompareResult.html",
          "!type": "fn()",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/android/net/LinkProperties.CompareResult.html#toString()"
            }
          }
        },
        "ProvisioningChange": {
          "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html",
          "STILL_NOT_PROVISIONED": {
            "!type": "+android.net.LinkProperties.ProvisioningChange",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#STILL_NOT_PROVISIONED"
          },
          "LOST_PROVISIONING": {
            "!type": "+android.net.LinkProperties.ProvisioningChange",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#LOST_PROVISIONING"
          },
          "STILL_PROVISIONED": {
            "!type": "+android.net.LinkProperties.ProvisioningChange",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#STILL_PROVISIONED"
          },
          "GAINED_PROVISIONING": {
            "!type": "+android.net.LinkProperties.ProvisioningChange",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#GAINED_PROVISIONING"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.LinkProperties.ProvisioningChange",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.ProvisioningChange.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#CREATOR"
        },
        "isValidMtu": {
          "!type": "fn(mtu: number, ipv6: bool) -> bool",
          "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isValidMtu(int, boolean)"
        },
        "compareProvisioning": {
          "!type": "fn(before: +android.net.LinkProperties, after: +android.net.LinkProperties) -> +android.net.LinkProperties.ProvisioningChange",
          "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#compareProvisioning(android.net.LinkProperties, android.net.LinkProperties)"
        },
        "prototype": {
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#describeContents()"
          },
          "addRoute": {
            "!type": "fn(route: +android.net.RouteInfo) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#addRoute(android.net.RouteInfo)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getMtu": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getMtu()"
          },
          "removeStackedLink": {
            "!type": "fn(iface: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#removeStackedLink(java.lang.String)"
          },
          "removeDnsServer": {
            "!type": "fn(dnsServer: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#removeDnsServer(java.net.InetAddress)"
          },
          "setDnsServers": {
            "!type": "fn(dnsServers: +java.util.Collection) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setDnsServers(java.util.Collection)"
          },
          "getLinkAddresses": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getLinkAddresses()"
          },
          "getHttpProxy": {
            "!type": "fn() -> +android.net.ProxyInfo",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getHttpProxy()"
          },
          "addStackedLink": {
            "!type": "fn(link: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#addStackedLink(android.net.LinkProperties)"
          },
          "setDomains": {
            "!type": "fn(domains: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setDomains(java.lang.String)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "hasIPv6DnsServer": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasIPv6DnsServer()"
          },
          "getAllLinkAddresses": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getAllLinkAddresses()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hashCode()"
          },
          "compareDnses": {
            "!type": "fn(target: +android.net.LinkProperties) -> +android.net.LinkProperties.CompareResult",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#compareDnses(android.net.LinkProperties)"
          },
          "isIdenticalMtu": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalMtu(android.net.LinkProperties)"
          },
          "getAllAddresses": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getAllAddresses()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setMtu": {
            "!type": "fn(mtu: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setMtu(int)"
          },
          "hasIPv6DefaultRoute": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasIPv6DefaultRoute()"
          },
          "setInterfaceName": {
            "!type": "fn(iface: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setInterfaceName(java.lang.String)"
          },
          "getStackedLinks": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getStackedLinks()"
          },
          "getAddresses": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getAddresses()"
          },
          "isProvisioned": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isProvisioned()"
          },
          "setTcpBufferSizes": {
            "!type": "fn(tcpBufferSizes: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setTcpBufferSizes(java.lang.String)"
          },
          "hasIPv4Address": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasIPv4Address()"
          },
          "getAllInterfaceNames": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getAllInterfaceNames()"
          },
          "getRoutes": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getRoutes()"
          },
          "getAllRoutes": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getAllRoutes()"
          },
          "compareAllInterfaceNames": {
            "!type": "fn(target: +android.net.LinkProperties) -> +android.net.LinkProperties.CompareResult",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#compareAllInterfaceNames(android.net.LinkProperties)"
          },
          "isIdenticalStackedLinks": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalStackedLinks(android.net.LinkProperties)"
          },
          "isIdenticalInterfaceName": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalInterfaceName(android.net.LinkProperties)"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#equals(java.lang.Object)"
          },
          "setHttpProxy": {
            "!type": "fn(proxy: +android.net.ProxyInfo) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setHttpProxy(android.net.ProxyInfo)"
          },
          "isIdenticalHttpProxy": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalHttpProxy(android.net.LinkProperties)"
          },
          "isIdenticalDnses": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalDnses(android.net.LinkProperties)"
          },
          "isReachable": {
            "!type": "fn(ip: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isReachable(java.net.InetAddress)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#writeToParcel(android.os.Parcel, int)"
          },
          "setLinkAddresses": {
            "!type": "fn(addresses: +java.util.Collection) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#setLinkAddresses(java.util.Collection)"
          },
          "getDomains": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getDomains()"
          },
          "removeLinkAddress": {
            "!type": "fn(toRemove: +android.net.LinkAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#removeLinkAddress(android.net.LinkAddress)"
          },
          "clear": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#clear()"
          },
          "addLinkAddress": {
            "!type": "fn(address: +android.net.LinkAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#addLinkAddress(android.net.LinkAddress)"
          },
          "compareAddresses": {
            "!type": "fn(target: +android.net.LinkProperties) -> +android.net.LinkProperties.CompareResult",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#compareAddresses(android.net.LinkProperties)"
          },
          "addDnsServer": {
            "!type": "fn(dnsServer: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#addDnsServer(java.net.InetAddress)"
          },
          "getDnsServers": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getDnsServers()"
          },
          "isIdenticalRoutes": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalRoutes(android.net.LinkProperties)"
          },
          "hasIPv4DnsServer": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasIPv4DnsServer()"
          },
          "getInterfaceName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getInterfaceName()"
          },
          "isIdenticalAddresses": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalAddresses(android.net.LinkProperties)"
          },
          "compareAllRoutes": {
            "!type": "fn(target: +android.net.LinkProperties) -> +android.net.LinkProperties.CompareResult",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#compareAllRoutes(android.net.LinkProperties)"
          },
          "hasGlobalIPv6Address": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasGlobalIPv6Address()"
          },
          "isIPv4Provisioned": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIPv4Provisioned()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isIPv6Provisioned": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIPv6Provisioned()"
          },
          "isIdenticalTcpBufferSizes": {
            "!type": "fn(target: +android.net.LinkProperties) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#isIdenticalTcpBufferSizes(android.net.LinkProperties)"
          },
          "removeRoute": {
            "!type": "fn(route: +android.net.RouteInfo) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#removeRoute(android.net.RouteInfo)"
          },
          "getTcpBufferSizes": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#getTcpBufferSizes()"
          },
          "hasIPv4DefaultRoute": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkProperties.html#hasIPv4DefaultRoute()"
          }
        }
      },
      "LocalServerSocket": {
        "!url": "http://developer.android.com/reference/android/net/LocalServerSocket.html",
        "!type": "fn(name: string)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "accept": {
            "!type": "fn() -> +android.net.LocalSocket",
            "!url": "http://developer.android.com/reference/android/net/LocalServerSocket.html#accept()"
          },
          "getLocalSocketAddress": {
            "!type": "fn() -> +android.net.LocalSocketAddress",
            "!url": "http://developer.android.com/reference/android/net/LocalServerSocket.html#getLocalSocketAddress()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "close": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalServerSocket.html#close()"
          },
          "getFileDescriptor": {
            "!type": "fn() -> +java.io.FileDescriptor",
            "!url": "http://developer.android.com/reference/android/net/LocalServerSocket.html#getFileDescriptor()"
          }
        }
      },
      "SSLCertificateSocketFactory": {
        "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html",
        "!type": "fn(handshakeTimeoutMillis: number)",
        "getInsecure": {
          "!type": "fn(handshakeTimeoutMillis: number, cache: +android.net.SSLSessionCache) -> +javax.net.ssl.SSLSocketFactory",
          "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getInsecure(int, android.net.SSLSessionCache)"
        },
        "getHttpSocketFactory": {
          "!type": "fn(handshakeTimeoutMillis: number, cache: +android.net.SSLSessionCache) -> +org.apache.http.conn.ssl.SSLSocketFactory",
          "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getHttpSocketFactory(int, android.net.SSLSessionCache)"
        },
        "getDefault": {
          "!type": "fn(handshakeTimeoutMillis: number) -> +javax.net.SocketFactory",
          "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getDefault(int)"
        },
        "verifyHostname": {
          "!type": "fn(socket: +java.net.Socket, hostname: string) -> void",
          "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#verifyHostname(java.net.Socket, java.lang.String)"
        },
        "prototype": {
          "setSoWriteTimeout": {
            "!type": "fn(socket: +java.net.Socket, writeTimeoutMilliseconds: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setSoWriteTimeout(java.net.Socket, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "createSocket": {
            "!type": "fn(k: +java.net.Socket, host: string, port: number, close: bool) -> +java.net.Socket",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#createSocket(java.net.Socket, java.lang.String, int, boolean)"
          },
          "getSupportedCipherSuites": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getSupportedCipherSuites()"
          },
          "setAlpnProtocols": {
            "!type": "fn(protocols: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setAlpnProtocols(byte[][])"
          },
          "setKeyManagers": {
            "!type": "fn(keyManagers: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setKeyManagers(javax.net.ssl.KeyManager[])"
          },
          "getNpnSelectedProtocol": {
            "!type": "fn(socket: +java.net.Socket) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getNpnSelectedProtocol(java.net.Socket)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getAlpnSelectedProtocol": {
            "!type": "fn(socket: +java.net.Socket) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getAlpnSelectedProtocol(java.net.Socket)"
          },
          "setTrustManagers": {
            "!type": "fn(trustManager: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setTrustManagers(javax.net.ssl.TrustManager[])"
          },
          "setHostname": {
            "!type": "fn(socket: +java.net.Socket, hostName: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setHostname(java.net.Socket, java.lang.String)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setUseSessionTickets": {
            "!type": "fn(socket: +java.net.Socket, useSessionTickets: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setUseSessionTickets(java.net.Socket, boolean)"
          },
          "setChannelIdPrivateKey": {
            "!type": "fn(privateKey: +java.security.PrivateKey) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setChannelIdPrivateKey(java.security.PrivateKey)"
          },
          "setNpnProtocols": {
            "!type": "fn(npnProtocols: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#setNpnProtocols(byte[][])"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "getDefaultCipherSuites": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/SSLCertificateSocketFactory.html#getDefaultCipherSuites()"
          }
        }
      },
      "TrafficStatsBenchmark": {
        "!url": "http://developer.android.com/reference/android/net/TrafficStatsBenchmark.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "timeGetTotalRxBytes": {
            "!type": "fn(reps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/TrafficStatsBenchmark.html#timeGetTotalRxBytes(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "timeGetMobileRxBytes": {
            "!type": "fn(reps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/TrafficStatsBenchmark.html#timeGetMobileRxBytes(int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "timeGetUidRxBytes": {
            "!type": "fn(reps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/TrafficStatsBenchmark.html#timeGetUidRxBytes(int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "IpConfiguration": {
        "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html",
        "!type": "fn()",
        "IpAssignment": {
          "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html",
          "DHCP": {
            "!type": "+android.net.IpConfiguration.IpAssignment",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html#DHCP"
          },
          "STATIC": {
            "!type": "+android.net.IpConfiguration.IpAssignment",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html#STATIC"
          },
          "UNASSIGNED": {
            "!type": "+android.net.IpConfiguration.IpAssignment",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html#UNASSIGNED"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.IpConfiguration.IpAssignment",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.IpAssignment.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "ProxySettings": {
          "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html",
          "STATIC": {
            "!type": "+android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#STATIC"
          },
          "UNASSIGNED": {
            "!type": "+android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#UNASSIGNED"
          },
          "PAC": {
            "!type": "+android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#PAC"
          },
          "NONE": {
            "!type": "+android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#NONE"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.ProxySettings.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#CREATOR"
        },
        "prototype": {
          "getStaticIpConfiguration": {
            "!type": "fn() -> +android.net.StaticIpConfiguration",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#getStaticIpConfiguration()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#equals(java.lang.Object)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#toString()"
          },
          "getIpAssignment": {
            "!type": "fn() -> +android.net.IpConfiguration.IpAssignment",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#getIpAssignment()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getHttpProxy": {
            "!type": "fn() -> +android.net.ProxyInfo",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#getHttpProxy()"
          },
          "setIpAssignment": {
            "!type": "fn(ipAssignment: +android.net.IpConfiguration.IpAssignment) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#setIpAssignment(android.net.IpConfiguration.IpAssignment)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#writeToParcel(android.os.Parcel, int)"
          },
          "setProxySettings": {
            "!type": "fn(proxySettings: +android.net.IpConfiguration.ProxySettings) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#setProxySettings(android.net.IpConfiguration.ProxySettings)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#hashCode()"
          },
          "setStaticIpConfiguration": {
            "!type": "fn(staticIpConfiguration: +android.net.StaticIpConfiguration) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#setStaticIpConfiguration(android.net.StaticIpConfiguration)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getProxySettings": {
            "!type": "fn() -> +android.net.IpConfiguration.ProxySettings",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#getProxySettings()"
          },
          "setHttpProxy": {
            "!type": "fn(httpProxy: +android.net.ProxyInfo) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpConfiguration.html#setHttpProxy(android.net.ProxyInfo)"
          }
        }
      },
      "RssiCurve": {
        "!url": "http://developer.android.com/reference/android/net/RssiCurve.html",
        "!type": "fn(start: number, bucketWidth: number, rssiBuckets: +java.newArray)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "lookupScore": {
            "!type": "fn(rssi: number) -> +java.lang.Byte",
            "!url": "http://developer.android.com/reference/android/net/RssiCurve.html#lookupScore(int)"
          }
        }
      },
      "UrlQuerySanitizer": {
        "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html",
        "!type": "fn()",
        "ParameterValuePair": {
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html",
          "!type": "fn(parameter: string, value: string)",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "IllegalCharacterValueSanitizer": {
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html",
          "!type": "fn(flags: number)",
          "NUL_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#NUL_OK"
          },
          "SPACE_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SPACE_OK"
          },
          "ALL_BUT_WHITESPACE_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_WHITESPACE_LEGAL"
          },
          "GT_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#GT_OK"
          },
          "DQUOTE_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#DQUOTE_OK"
          },
          "LT_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#LT_OK"
          },
          "ALL_WHITESPACE_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_WHITESPACE_OK"
          },
          "ALL_ILLEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_ILLEGAL"
          },
          "PCT_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#PCT_OK"
          },
          "ALL_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_OK"
          },
          "AMP_AND_SPACE_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_AND_SPACE_LEGAL"
          },
          "AMP_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_LEGAL"
          },
          "AMP_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_OK"
          },
          "ALL_BUT_NUL_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_NUL_LEGAL"
          },
          "SCRIPT_URL_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SCRIPT_URL_OK"
          },
          "SPACE_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SPACE_LEGAL"
          },
          "NON_7_BIT_ASCII_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#NON_7_BIT_ASCII_OK"
          },
          "URL_AND_SPACE_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#URL_AND_SPACE_LEGAL"
          },
          "SQUOTE_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SQUOTE_OK"
          },
          "ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL"
          },
          "URL_LEGAL": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#URL_LEGAL"
          },
          "OTHER_WHITESPACE_OK": {
            "!type": "number",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#OTHER_WHITESPACE_OK"
          },
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "sanitize": {
              "!type": "fn(value: string) -> string",
              "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#sanitize(java.lang.String)"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "getAllButWhitespaceLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButWhitespaceLegal()"
        },
        "getAmpAndSpaceLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpAndSpaceLegal()"
        },
        "getUrlLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlLegal()"
        },
        "getAllButNulAndAngleBracketsLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulAndAngleBracketsLegal()"
        },
        "getSpaceLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getSpaceLegal()"
        },
        "getAmpLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpLegal()"
        },
        "getUrlAndSpaceLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlAndSpaceLegal()"
        },
        "getAllIllegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllIllegal()"
        },
        "getAllButNulLegal": {
          "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
          "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulLegal()"
        },
        "prototype": {
          "getValueSanitizer": {
            "!type": "fn(parameter: string) -> +android.net.UrlQuerySanitizer.ValueSanitizer",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValueSanitizer(java.lang.String)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getValue": {
            "!type": "fn(parameter: string) -> string",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValue(java.lang.String)"
          },
          "getPreferFirstRepeatedParameter": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getPreferFirstRepeatedParameter()"
          },
          "setUnregisteredParameterValueSanitizer": {
            "!type": "fn(sanitizer: +android.net.UrlQuerySanitizer.ValueSanitizer) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer)"
          },
          "parseQuery": {
            "!type": "fn(query: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseQuery(java.lang.String)"
          },
          "getParameterSet": {
            "!type": "fn() -> +java.util.Set",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterSet()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "hasParameter": {
            "!type": "fn(parameter: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#hasParameter(java.lang.String)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "unescape": {
            "!type": "fn(string: string) -> string",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#unescape(java.lang.String)"
          },
          "registerParameters": {
            "!type": "fn(parameters: +java.newArray, valueSanitizer: +android.net.UrlQuerySanitizer.ValueSanitizer) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameters(java.lang.String[], android.net.UrlQuerySanitizer.ValueSanitizer)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getUnregisteredParameterValueSanitizer": {
            "!type": "fn() -> +android.net.UrlQuerySanitizer.ValueSanitizer",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUnregisteredParameterValueSanitizer()"
          },
          "registerParameter": {
            "!type": "fn(parameter: string, valueSanitizer: +android.net.UrlQuerySanitizer.ValueSanitizer) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameter(java.lang.String, android.net.UrlQuerySanitizer.ValueSanitizer)"
          },
          "getParameterList": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterList()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "parseUrl": {
            "!type": "fn(url: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseUrl(java.lang.String)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setPreferFirstRepeatedParameter": {
            "!type": "fn(preferFirstRepeatedParameter: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setPreferFirstRepeatedParameter(boolean)"
          },
          "getEffectiveValueSanitizer": {
            "!type": "fn(parameter: string) -> +android.net.UrlQuerySanitizer.ValueSanitizer",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getEffectiveValueSanitizer(java.lang.String)"
          },
          "getAllowUnregisteredParamaters": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllowUnregisteredParamaters()"
          },
          "setAllowUnregisteredParamaters": {
            "!type": "fn(allowUnregisteredParamaters: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setAllowUnregisteredParamaters(boolean)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "WifiLinkQualityInfo": {
        "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#CREATOR"
        },
        "UNKNOWN_INT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_INT"
        },
        "NORMALIZED_MIN_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MIN_SIGNAL_STRENGTH"
        },
        "NORMALIZED_SIGNAL_STRENGTH_RANGE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_SIGNAL_STRENGTH_RANGE"
        },
        "UNKNOWN_LONG": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_LONG"
        },
        "NORMALIZED_MAX_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MAX_SIGNAL_STRENGTH"
        },
        "createFromParcelBody": {
          "!type": "fn(in: +android.os.Parcel) -> +android.net.WifiLinkQualityInfo",
          "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#createFromParcelBody(android.os.Parcel)"
        },
        "prototype": {
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#describeContents()"
          },
          "setPacketErrorCount": {
            "!type": "fn(packetErrorCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketErrorCount(long)"
          },
          "setTheoreticalLatency": {
            "!type": "fn(theoreticalLatency: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalLatency(int)"
          },
          "setTxBad": {
            "!type": "fn(txBad: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#setTxBad(long)"
          },
          "getDataSampleDuration": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getDataSampleDuration()"
          },
          "getTxBad": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#getTxBad()"
          },
          "getPacketErrorCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketErrorCount()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "setTheoreticalTxBandwidth": {
            "!type": "fn(theoreticalTxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalTxBandwidth(int)"
          },
          "getLastDataSampleTime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getLastDataSampleTime()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setTheoreticalRxBandwidth": {
            "!type": "fn(theoreticalRxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalRxBandwidth(int)"
          },
          "getRssi": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#getRssi()"
          },
          "setRssi": {
            "!type": "fn(rssi: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#setRssi(int)"
          },
          "getTheoreticalLatency": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalLatency()"
          },
          "getNormalizedSignalStrength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNormalizedSignalStrength()"
          },
          "getTheoreticalTxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalTxBandwidth()"
          },
          "getType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#getType()"
          },
          "setPacketCount": {
            "!type": "fn(packetCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketCount(long)"
          },
          "setType": {
            "!type": "fn(type: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#setType(int)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getTxGood": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#getTxGood()"
          },
          "setNetworkType": {
            "!type": "fn(networkType: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNetworkType(int)"
          },
          "getTheoreticalRxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalRxBandwidth()"
          },
          "setBssid": {
            "!type": "fn(bssid: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#setBssid(java.lang.String)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "setDataSampleDuration": {
            "!type": "fn(dataSampleDuration: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setDataSampleDuration(int)"
          },
          "getBssid": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#getBssid()"
          },
          "getPacketCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketCount()"
          },
          "setTxGood": {
            "!type": "fn(txGood: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiLinkQualityInfo.html#setTxGood(long)"
          },
          "setLastDataSampleTime": {
            "!type": "fn(lastDataSampleTime: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setLastDataSampleTime(long)"
          },
          "setNormalizedSignalStrength": {
            "!type": "fn(normalizedSignalStrength: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNormalizedSignalStrength(int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getNetworkType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNetworkType()"
          }
        }
      },
      "NetworkFactory": {
        "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html",
        "!type": "fn(looper: +android.os.Looper, context: +android.content.Context, logTag: string, filter: +android.net.NetworkCapabilities)",
        "CMD_REQUEST_NETWORK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#CMD_REQUEST_NETWORK"
        },
        "CMD_CANCEL_REQUEST": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#CMD_CANCEL_REQUEST"
        },
        "prototype": {
          "handleMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#handleMessage(android.os.Message)"
          },
          "sendMessage": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessage(android.os.Message)"
          },
          "sendEmptyMessageAtTime": {
            "!type": "fn(what: number, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageAtTime(int, long)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "removeNetworkRequest": {
            "!type": "fn(networkRequest: +android.net.NetworkRequest) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#removeNetworkRequest(android.net.NetworkRequest)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "register": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#register()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "acceptRequest": {
            "!type": "fn(request: +android.net.NetworkRequest, score: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#acceptRequest(android.net.NetworkRequest, int)"
          },
          "removeCallbacksAndMessages": {
            "!type": "fn(token: +java.lang.Object) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacksAndMessages(java.lang.Object)"
          },
          "postAtTime": {
            "!type": "fn(r: +java.lang.Runnable, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtTime(java.lang.Runnable, long)"
          },
          "sendMessageAtFrontOfQueue": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtFrontOfQueue(android.os.Message)"
          },
          "getLooper": {
            "!type": "fn() -> +android.os.Looper",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getLooper()"
          },
          "post": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#post(java.lang.Runnable)"
          },
          "unregister": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#unregister()"
          },
          "sendMessageDelayed": {
            "!type": "fn(msg: +android.os.Message, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageDelayed(android.os.Message, long)"
          },
          "hasMessages": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasMessages(int)"
          },
          "sendMessageAtTime": {
            "!type": "fn(msg: +android.os.Message, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtTime(android.os.Message, long)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "postDelayed": {
            "!type": "fn(r: +java.lang.Runnable, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long)"
          },
          "setScoreFilter": {
            "!type": "fn(score: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#setScoreFilter(int)"
          },
          "removeMessages": {
            "!type": "fn(what: number) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeMessages(int)"
          },
          "dispatchMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#dispatchMessage(android.os.Message)"
          },
          "removeCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacks(java.lang.Runnable)"
          },
          "sendEmptyMessage": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessage(int)"
          },
          "runWithScissors": {
            "!type": "fn(r: +java.lang.Runnable, timeout: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#runWithScissors(java.lang.Runnable, long)"
          },
          "dump": {
            "!type": "fn(fd: +java.io.FileDescriptor, writer: +java.io.PrintWriter, args: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
          },
          "setCapabilityFilter": {
            "!type": "fn(netCap: +android.net.NetworkCapabilities) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#setCapabilityFilter(android.net.NetworkCapabilities)"
          },
          "sendEmptyMessageDelayed": {
            "!type": "fn(what: number, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageDelayed(int, long)"
          },
          "hasCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasCallbacks(java.lang.Runnable)"
          },
          "addNetworkRequest": {
            "!type": "fn(networkRequest: +android.net.NetworkRequest, score: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkFactory.html#addNetworkRequest(android.net.NetworkRequest, int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "obtainMessage": {
            "!type": "fn() -> +android.os.Message",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#obtainMessage()"
          },
          "getMessageName": {
            "!type": "fn(message: +android.os.Message) -> string",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getMessageName(android.os.Message)"
          },
          "postAtFrontOfQueue": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtFrontOfQueue(java.lang.Runnable)"
          }
        }
      },
      "NetworkTemplate": {
        "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html",
        "!type": "fn(matchRule: number, subscriberId: string, networkId: string)",
        "MATCH_MOBILE_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_MOBILE_ALL"
        },
        "MATCH_ETHERNET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_ETHERNET"
        },
        "MATCH_BLUETOOTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_BLUETOOTH"
        },
        "MATCH_MOBILE_4G": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_MOBILE_4G"
        },
        "MATCH_MOBILE_WILDCARD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_MOBILE_WILDCARD"
        },
        "MATCH_MOBILE_3G_LOWER": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_MOBILE_3G_LOWER"
        },
        "MATCH_WIFI_WILDCARD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_WIFI_WILDCARD"
        },
        "MATCH_WIFI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#MATCH_WIFI"
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#CREATOR"
        },
        "forceAllNetworkTypes": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#forceAllNetworkTypes()"
        },
        "buildTemplateMobileAll": {
          "!type": "fn(subscriberId: string) -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateMobileAll(java.lang.String)"
        },
        "buildTemplateBluetooth": {
          "!type": "fn() -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateBluetooth()"
        },
        "normalize": {
          "!type": "fn(template: +android.net.NetworkTemplate, merged: +java.newArray) -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#normalize(android.net.NetworkTemplate, java.lang.String[])"
        },
        "buildTemplateEthernet": {
          "!type": "fn() -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateEthernet()"
        },
        "buildTemplateWifiWildcard": {
          "!type": "fn() -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateWifiWildcard()"
        },
        "buildTemplateMobile4g": {
          "!type": "fn(subscriberId: string) -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateMobile4g(java.lang.String)"
        },
        "buildTemplateMobile3gLower": {
          "!type": "fn(subscriberId: string) -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateMobile3gLower(java.lang.String)"
        },
        "buildTemplateWifi": {
          "!type": "fn() -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateWifi()"
        },
        "buildTemplateMobileWildcard": {
          "!type": "fn() -> +android.net.NetworkTemplate",
          "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#buildTemplateMobileWildcard()"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#equals(java.lang.Object)"
          },
          "getSubscriberId": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#getSubscriberId()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "matches": {
            "!type": "fn(ident: +android.net.NetworkIdentity) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#matches(android.net.NetworkIdentity)"
          },
          "getNetworkId": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#getNetworkId()"
          },
          "getMatchRule": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#getMatchRule()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#writeToParcel(android.os.Parcel, int)"
          },
          "isMatchRuleMobile": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#isMatchRuleMobile()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkTemplate.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ProxyInfo": {
        "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html",
        "!type": "fn(host: string, port: number, exclList: string)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#CREATOR"
        },
        "LOCAL_HOST": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#LOCAL_HOST"
        },
        "LOCAL_EXCL_LIST": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#LOCAL_EXCL_LIST"
        },
        "LOCAL_PORT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#LOCAL_PORT"
        },
        "buildDirectProxy": {
          "!type": "fn(host: string, port: number) -> +android.net.ProxyInfo",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#buildDirectProxy(java.lang.String, int)"
        },
        "buildPacProxy": {
          "!type": "fn(pacUri: +android.net.Uri) -> +android.net.ProxyInfo",
          "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#buildPacProxy(android.net.Uri)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#equals(java.lang.Object)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#toString()"
          },
          "makeProxy": {
            "!type": "fn() -> +java.net.Proxy",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#makeProxy()"
          },
          "getPort": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getPort()"
          },
          "getPacFileUrl": {
            "!type": "fn() -> +android.net.Uri",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getPacFileUrl()"
          },
          "getSocketAddress": {
            "!type": "fn() -> +java.net.InetSocketAddress",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getSocketAddress()"
          },
          "getExclusionList": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getExclusionList()"
          },
          "getExclusionListAsString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getExclusionListAsString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getHost": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#getHost()"
          },
          "isValid": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ProxyInfo.html#isValid()"
          }
        }
      },
      "NetworkRequest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html",
        "!type": "fn(nc: +android.net.NetworkCapabilities, legacyType: number, rId: number)",
        "Builder": {
          "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html",
          "!type": "fn()",
          "prototype": {
            "setLinkUpstreamBandwidthKbps": {
              "!type": "fn(upKbps: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#setLinkUpstreamBandwidthKbps(int)"
            },
            "removeTransportType": {
              "!type": "fn(transportType: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#removeTransportType(int)"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "addCapability": {
              "!type": "fn(capability: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#addCapability(int)"
            },
            "addTransportType": {
              "!type": "fn(transportType: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#addTransportType(int)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "clearCapabilities": {
              "!type": "fn() -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#clearCapabilities()"
            },
            "setLinkDownstreamBandwidthKbps": {
              "!type": "fn(downKbps: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#setLinkDownstreamBandwidthKbps(int)"
            },
            "removeCapability": {
              "!type": "fn(capability: number) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#removeCapability(int)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "build": {
              "!type": "fn() -> +android.net.NetworkRequest",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#build()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "setNetworkSpecifier": {
              "!type": "fn(networkSpecifier: string) -> +android.net.NetworkRequest.Builder",
              "!url": "http://developer.android.com/reference/android/net/NetworkRequest.Builder.html#setNetworkSpecifier(java.lang.String)"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkRequest.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "DhcpResults": {
        "!url": "http://developer.android.com/reference/android/net/DhcpResults.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#CREATOR"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#writeToParcel(android.os.Parcel, int)"
          },
          "addDns": {
            "!type": "fn(addrString: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#addDns(java.lang.String)"
          },
          "updateFromDhcpRequest": {
            "!type": "fn(orig: +android.net.DhcpResults) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#updateFromDhcpRequest(android.net.DhcpResults)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setGateway": {
            "!type": "fn(addrString: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setGateway(java.lang.String)"
          },
          "hasMeteredHint": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#hasMeteredHint()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#describeContents()"
          },
          "setIpAddress": {
            "!type": "fn(addrString: string, prefixLength: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setIpAddress(java.lang.String, int)"
          },
          "toLinkProperties": {
            "!type": "fn(iface: string) -> +android.net.LinkProperties",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#toLinkProperties(java.lang.String)"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setDomains": {
            "!type": "fn(newDomains: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setDomains(java.lang.String)"
          },
          "setLeaseDuration": {
            "!type": "fn(duration: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setLeaseDuration(int)"
          },
          "clear": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#clear()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#hashCode()"
          },
          "setVendorInfo": {
            "!type": "fn(info: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setVendorInfo(java.lang.String)"
          },
          "setServerAddress": {
            "!type": "fn(addrString: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/DhcpResults.html#setServerAddress(java.lang.String)"
          },
          "getRoutes": {
            "!type": "fn(iface: string) -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#getRoutes(java.lang.String)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "NetworkIdentity": {
        "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html",
        "!type": "fn(type: number, subType: number, subscriberId: string, networkId: string, roaming: bool)",
        "SUBTYPE_COMBINED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#SUBTYPE_COMBINED"
        },
        "COMBINE_SUBTYPE_ENABLED": {
          "!type": "bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#COMBINE_SUBTYPE_ENABLED"
        },
        "buildNetworkIdentity": {
          "!type": "fn(context: +android.content.Context, state: +android.net.NetworkState) -> +android.net.NetworkIdentity",
          "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#buildNetworkIdentity(android.content.Context, android.net.NetworkState)"
        },
        "scrubSubscriberId": {
          "!type": "fn(subscriberId: string) -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#scrubSubscriberId(java.lang.String)"
        },
        "prototype": {
          "getRoaming": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#getRoaming()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "compareTo": {
            "!type": "fn(another: +android.net.NetworkIdentity) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#compareTo(android.net.NetworkIdentity)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#equals(java.lang.Object)"
          },
          "getSubscriberId": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#getSubscriberId()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getNetworkId": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#getNetworkId()"
          },
          "getSubType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#getSubType()"
          },
          "getType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#getType()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkIdentity.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Uri": {
        "!url": "http://developer.android.com/reference/android/net/Uri.html",
        "Builder": {
          "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html",
          "!type": "fn()",
          "prototype": {
            "fragment": {
              "!type": "fn(fragment: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#fragment(java.lang.String)"
            },
            "opaquePart": {
              "!type": "fn(opaquePart: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#opaquePart(java.lang.String)"
            },
            "appendEncodedPath": {
              "!type": "fn(newSegment: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#appendEncodedPath(java.lang.String)"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "query": {
              "!type": "fn(query: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#query(java.lang.String)"
            },
            "authority": {
              "!type": "fn(authority: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#authority(java.lang.String)"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "encodedQuery": {
              "!type": "fn(query: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#encodedQuery(java.lang.String)"
            },
            "scheme": {
              "!type": "fn(scheme: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#scheme(java.lang.String)"
            },
            "appendQueryParameter": {
              "!type": "fn(key: string, value: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#appendQueryParameter(java.lang.String, java.lang.String)"
            },
            "path": {
              "!type": "fn(path: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#path(java.lang.String)"
            },
            "build": {
              "!type": "fn() -> +android.net.Uri",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#build()"
            },
            "clearQuery": {
              "!type": "fn() -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#clearQuery()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "encodedAuthority": {
              "!type": "fn(authority: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#encodedAuthority(java.lang.String)"
            },
            "encodedOpaquePart": {
              "!type": "fn(opaquePart: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#encodedOpaquePart(java.lang.String)"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#toString()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "appendPath": {
              "!type": "fn(newSegment: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#appendPath(java.lang.String)"
            },
            "encodedPath": {
              "!type": "fn(path: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#encodedPath(java.lang.String)"
            },
            "encodedFragment": {
              "!type": "fn(fragment: string) -> +android.net.Uri.Builder",
              "!url": "http://developer.android.com/reference/android/net/Uri.Builder.html#encodedFragment(java.lang.String)"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#CREATOR"
        },
        "EMPTY": {
          "!type": "+android.net.Uri",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#EMPTY"
        },
        "writeToParcel": {
          "!type": "fn(out: +android.os.Parcel, uri: +android.net.Uri) -> void",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#writeToParcel(android.os.Parcel, android.net.Uri)"
        },
        "withAppendedPath": {
          "!type": "fn(baseUri: +android.net.Uri, pathSegment: string) -> +android.net.Uri",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#withAppendedPath(android.net.Uri, java.lang.String)"
        },
        "fromFile": {
          "!type": "fn(file: +java.io.File) -> +android.net.Uri",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#fromFile(java.io.File)"
        },
        "encode": {
          "!type": "fn(s: string) -> string",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#encode(java.lang.String)"
        },
        "decode": {
          "!type": "fn(s: string) -> string",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#decode(java.lang.String)"
        },
        "parse": {
          "!type": "fn(uriString: string) -> +android.net.Uri",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#parse(java.lang.String)"
        },
        "fromParts": {
          "!type": "fn(scheme: string, ssp: string, fragment: string) -> +android.net.Uri",
          "!url": "http://developer.android.com/reference/android/net/Uri.html#fromParts(java.lang.String, java.lang.String, java.lang.String)"
        },
        "prototype": {
          "getUserInfo": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getUserInfo()"
          },
          "isPathPrefixMatch": {
            "!type": "fn(prefix: +android.net.Uri) -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#isPathPrefixMatch(android.net.Uri)"
          },
          "getBooleanQueryParameter": {
            "!type": "fn(key: string, defaultValue: bool) -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getBooleanQueryParameter(java.lang.String, boolean)"
          },
          "buildUpon": {
            "!type": "fn() -> +android.net.Uri.Builder",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#buildUpon()"
          },
          "isOpaque": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#isOpaque()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getQueryParameterNames": {
            "!type": "fn() -> +java.util.Set",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getQueryParameterNames()"
          },
          "getPort": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getPort()"
          },
          "getScheme": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getScheme()"
          },
          "getCanonicalUri": {
            "!type": "fn() -> +android.net.Uri",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getCanonicalUri()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#hashCode()"
          },
          "getLastPathSegment": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getLastPathSegment()"
          },
          "getPath": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getPath()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "normalizeScheme": {
            "!type": "fn() -> +android.net.Uri",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#normalizeScheme()"
          },
          "getSchemeSpecificPart": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getSchemeSpecificPart()"
          },
          "getQueryParameters": {
            "!type": "fn(key: string) -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getQueryParameters(java.lang.String)"
          },
          "getEncodedQuery": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedQuery()"
          },
          "getEncodedAuthority": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedAuthority()"
          },
          "getEncodedSchemeSpecificPart": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedSchemeSpecificPart()"
          },
          "toSafeString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#toSafeString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#equals(java.lang.Object)"
          },
          "isRelative": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#isRelative()"
          },
          "getPathSegments": {
            "!type": "fn() -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getPathSegments()"
          },
          "getHost": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getHost()"
          },
          "getAuthority": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getAuthority()"
          },
          "getEncodedFragment": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedFragment()"
          },
          "getQueryParameter": {
            "!type": "fn(key: string) -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)"
          },
          "getEncodedUserInfo": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedUserInfo()"
          },
          "isHierarchical": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#isHierarchical()"
          },
          "getQuery": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getQuery()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "compareTo": {
            "!type": "fn(other: +android.net.Uri) -> number",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#compareTo(android.net.Uri)"
          },
          "getEncodedPath": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getEncodedPath()"
          },
          "checkFileUriExposed": {
            "!type": "fn(location: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#checkFileUriExposed(java.lang.String)"
          },
          "getFragment": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#getFragment()"
          },
          "isAbsolute": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/Uri.html#isAbsolute()"
          }
        }
      },
      "SSLSessionCache": {
        "!url": "http://developer.android.com/reference/android/net/SSLSessionCache.html",
        "!type": "fn(cache: +java.lang.Object)",
        "install": {
          "!type": "fn(cache: +android.net.SSLSessionCache, context: +javax.net.ssl.SSLContext) -> void",
          "!url": "http://developer.android.com/reference/android/net/SSLSessionCache.html#install(android.net.SSLSessionCache, javax.net.ssl.SSLContext)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "ConnectivityManager": {
        "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html",
        "!type": "fn(context: +android.content.Context, service: IConnectivityManager)",
        "NetworkCallback": {
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html",
          "!type": "fn()",
          "prototype": {
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "onNetworkResumed": {
              "!type": "fn(network: +android.net.Network) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onNetworkResumed(android.net.Network)"
            },
            "onLinkPropertiesChanged": {
              "!type": "fn(network: +android.net.Network, linkProperties: +android.net.LinkProperties) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLinkPropertiesChanged(android.net.Network, android.net.LinkProperties)"
            },
            "onLosing": {
              "!type": "fn(network: +android.net.Network, maxMsToLive: number) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLosing(android.net.Network, int)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "onPreCheck": {
              "!type": "fn(network: +android.net.Network) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onPreCheck(android.net.Network)"
            },
            "onAvailable": {
              "!type": "fn(network: +android.net.Network) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network)"
            },
            "onUnavailable": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onUnavailable()"
            },
            "onLost": {
              "!type": "fn(network: +android.net.Network) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLost(android.net.Network)"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "onCapabilitiesChanged": {
              "!type": "fn(network: +android.net.Network, networkCapabilities: +android.net.NetworkCapabilities) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onCapabilitiesChanged(android.net.Network, android.net.NetworkCapabilities)"
            },
            "onNetworkSuspended": {
              "!type": "fn(network: +android.net.Network) -> void",
              "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onNetworkSuspended(android.net.Network)"
            }
          }
        },
        "ACTION_CAPTIVE_PORTAL_SIGN_IN": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_SIGN_IN"
        },
        "EXTRA_NETWORK_REQUEST": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_REQUEST"
        },
        "TYPE_WIMAX": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIMAX"
        },
        "EXTRA_REALTIME_NS": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_REALTIME_NS"
        },
        "CALLBACK_LOSING": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_LOSING"
        },
        "TYPE_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_NONE"
        },
        "EXTRA_NETWORK": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK"
        },
        "DEFAULT_NETWORK_PREFERENCE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#DEFAULT_NETWORK_PREFERENCE"
        },
        "CALLBACK_UNAVAIL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_UNAVAIL"
        },
        "EXTRA_AVAILABLE_TETHER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_AVAILABLE_TETHER"
        },
        "TYPE_ETHERNET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_ETHERNET"
        },
        "CALLBACK_LOST": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_LOST"
        },
        "TYPE_VPN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_VPN"
        },
        "TETHER_ERROR_SERVICE_UNAVAIL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_SERVICE_UNAVAIL"
        },
        "NETID_UNSET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#NETID_UNSET"
        },
        "CALLBACK_RESUMED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_RESUMED"
        },
        "TYPE_MOBILE_SUPL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_SUPL"
        },
        "TETHER_ERROR_TETHER_IFACE_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_TETHER_IFACE_ERROR"
        },
        "EXTRA_REASON": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_REASON"
        },
        "EXTRA_OTHER_NETWORK_INFO": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_OTHER_NETWORK_INFO"
        },
        "REQUEST_ID_UNSET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#REQUEST_ID_UNSET"
        },
        "TETHER_ERROR_DISABLE_NAT_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_DISABLE_NAT_ERROR"
        },
        "EXTRA_DEVICE_TYPE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_DEVICE_TYPE"
        },
        "CALLBACK_IP_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_IP_CHANGED"
        },
        "CALLBACK_EXIT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_EXIT"
        },
        "EXTRA_IS_CAPTIVE_PORTAL": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_IS_CAPTIVE_PORTAL"
        },
        "CALLBACK_AVAILABLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_AVAILABLE"
        },
        "MAX_NETWORK_TYPE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#MAX_NETWORK_TYPE"
        },
        "TYPE_BLUETOOTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_BLUETOOTH"
        },
        "EXTRA_NETWORK_INFO": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_INFO"
        },
        "CALLBACK_CAP_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_CAP_CHANGED"
        },
        "ACTION_DATA_ACTIVITY_CHANGE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_DATA_ACTIVITY_CHANGE"
        },
        "TETHER_ERROR_UNKNOWN_IFACE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_UNKNOWN_IFACE"
        },
        "EXTRA_NO_CONNECTIVITY": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NO_CONNECTIVITY"
        },
        "INET_CONDITION_ACTION": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#INET_CONDITION_ACTION"
        },
        "TYPE_MOBILE_IA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_IA"
        },
        "TYPE_MOBILE_FOTA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_FOTA"
        },
        "EXTRA_INET_CONDITION": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_INET_CONDITION"
        },
        "ACTION_BACKGROUND_DATA_SETTING_CHANGED": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_BACKGROUND_DATA_SETTING_CHANGED"
        },
        "ACTION_TETHER_STATE_CHANGED": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_TETHER_STATE_CHANGED"
        },
        "TYPE_MOBILE_EMERGENCY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_EMERGENCY"
        },
        "ACTION_PROMPT_UNVALIDATED": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_PROMPT_UNVALIDATED"
        },
        "TETHER_ERROR_MASTER_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_MASTER_ERROR"
        },
        "TETHER_ERROR_UNSUPPORTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_UNSUPPORTED"
        },
        "EXTRA_IS_FAILOVER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_IS_FAILOVER"
        },
        "MAX_NETWORK_REQUEST_TIMEOUT_MS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#MAX_NETWORK_REQUEST_TIMEOUT_MS"
        },
        "EXTRA_NETWORK_TYPE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_TYPE"
        },
        "TETHER_ERROR_IFACE_CFG_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_IFACE_CFG_ERROR"
        },
        "TYPE_WIFI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIFI"
        },
        "EXTRA_ERRORED_TETHER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_ERRORED_TETHER"
        },
        "TETHER_ERROR_UNTETHER_IFACE_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_UNTETHER_IFACE_ERROR"
        },
        "MAX_RADIO_TYPE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#MAX_RADIO_TYPE"
        },
        "TYPE_PROXY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_PROXY"
        },
        "EXTRA_EXTRA_INFO": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_EXTRA_INFO"
        },
        "TYPE_WIFI_P2P": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIFI_P2P"
        },
        "TYPE_MOBILE_HIPRI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_HIPRI"
        },
        "TETHER_ERROR_UNAVAIL_IFACE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_UNAVAIL_IFACE"
        },
        "TYPE_MOBILE_MMS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_MMS"
        },
        "TYPE_MOBILE_DUN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_DUN"
        },
        "TETHER_ERROR_ENABLE_NAT_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_ENABLE_NAT_ERROR"
        },
        "TYPE_MOBILE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE"
        },
        "CONNECTIVITY_ACTION": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CONNECTIVITY_ACTION"
        },
        "TETHER_ERROR_NO_ERROR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TETHER_ERROR_NO_ERROR"
        },
        "CALLBACK_RELEASED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_RELEASED"
        },
        "CALLBACK_PRECHECK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_PRECHECK"
        },
        "TYPE_MOBILE_CBS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_CBS"
        },
        "EXTRA_ACTIVE_TETHER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_ACTIVE_TETHER"
        },
        "TYPE_MOBILE_IMS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_IMS"
        },
        "ACTION_CAPTIVE_PORTAL_TEST_COMPLETED": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_TEST_COMPLETED"
        },
        "CALLBACK_SUSPENDED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#CALLBACK_SUSPENDED"
        },
        "EXTRA_CAPTIVE_PORTAL": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL"
        },
        "TYPE_DUMMY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_DUMMY"
        },
        "EXTRA_IS_ACTIVE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_IS_ACTIVE"
        },
        "getNetworkTypeName": {
          "!type": "fn(type: number) -> string",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkTypeName(int)"
        },
        "getProcessDefaultNetwork": {
          "!type": "fn() -> +android.net.Network",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getProcessDefaultNetwork()"
        },
        "isNetworkTypeWifi": {
          "!type": "fn(networkType: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkTypeWifi(int)"
        },
        "isNetworkTypeMobile": {
          "!type": "fn(networkType: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkTypeMobile(int)"
        },
        "from": {
          "!type": "fn(context: +android.content.Context) -> +android.net.ConnectivityManager",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#from(android.content.Context)"
        },
        "isNetworkTypeValid": {
          "!type": "fn(networkType: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkTypeValid(int)"
        },
        "setProcessDefaultNetworkForHostResolution": {
          "!type": "fn(network: +android.net.Network) -> bool",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setProcessDefaultNetworkForHostResolution(android.net.Network)"
        },
        "enforceTetherChangePermission": {
          "!type": "fn(context: +android.content.Context) -> void",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#enforceTetherChangePermission(android.content.Context)"
        },
        "setProcessDefaultNetwork": {
          "!type": "fn(network: +android.net.Network) -> bool",
          "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setProcessDefaultNetwork(android.net.Network)"
        },
        "prototype": {
          "reportBadNetwork": {
            "!type": "fn(network: +android.net.Network) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#reportBadNetwork(android.net.Network)"
          },
          "getActiveNetworkInfoForUid": {
            "!type": "fn(uid: number) -> +android.net.NetworkInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfoForUid(int)"
          },
          "getActiveNetworkInfo": {
            "!type": "fn() -> +android.net.NetworkInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo()"
          },
          "untether": {
            "!type": "fn(iface: string) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#untether(java.lang.String)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getLastTetherError": {
            "!type": "fn(iface: string) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getLastTetherError(java.lang.String)"
          },
          "getActiveNetwork": {
            "!type": "fn() -> +android.net.Network",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetwork()"
          },
          "getDefaultProxy": {
            "!type": "fn() -> +android.net.ProxyInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getDefaultProxy()"
          },
          "requestRouteToHostAddress": {
            "!type": "fn(networkType: number, hostAddress: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#requestRouteToHostAddress(int, java.net.InetAddress)"
          },
          "addDefaultNetworkActiveListener": {
            "!type": "fn(l: +android.net.ConnectivityManager.OnNetworkActiveListener) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"
          },
          "getAllNetworks": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworks()"
          },
          "setNetworkPreference": {
            "!type": "fn(preference: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setNetworkPreference(int)"
          },
          "setGlobalProxy": {
            "!type": "fn(p: +android.net.ProxyInfo) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setGlobalProxy(android.net.ProxyInfo)"
          },
          "reportNetworkConnectivity": {
            "!type": "fn(network: +android.net.Network, hasConnectivity: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#reportNetworkConnectivity(android.net.Network, boolean)"
          },
          "setAcceptUnvalidated": {
            "!type": "fn(network: +android.net.Network, accept: bool, always: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setAcceptUnvalidated(android.net.Network, boolean, boolean)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "requestNetwork": {
            "!type": "fn(request: +android.net.NetworkRequest, networkCallback: +android.net.ConnectivityManager.NetworkCallback) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)"
          },
          "requestBandwidthUpdate": {
            "!type": "fn(network: +android.net.Network) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#requestBandwidthUpdate(android.net.Network)"
          },
          "getActiveLinkProperties": {
            "!type": "fn() -> +android.net.LinkProperties",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveLinkProperties()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "factoryReset": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#factoryReset()"
          },
          "registerNetworkFactory": {
            "!type": "fn(messenger: +android.os.Messenger, name: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkFactory(android.os.Messenger, java.lang.String)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "registerNetworkAgent": {
            "!type": "fn(messenger: +android.os.Messenger, ni: +android.net.NetworkInfo, lp: +android.net.LinkProperties, nc: +android.net.NetworkCapabilities, score: number, misc: +android.net.NetworkMisc) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkMisc)"
          },
          "isTetheringSupported": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isTetheringSupported()"
          },
          "unregisterNetworkFactory": {
            "!type": "fn(messenger: +android.os.Messenger) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkFactory(android.os.Messenger)"
          },
          "isDefaultNetworkActive": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isDefaultNetworkActive()"
          },
          "startUsingNetworkFeature": {
            "!type": "fn(networkType: number, feature: string) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#startUsingNetworkFeature(int, java.lang.String)"
          },
          "setUsbTethering": {
            "!type": "fn(enable: bool) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setUsbTethering(boolean)"
          },
          "getTetherableWifiRegexs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetherableWifiRegexs()"
          },
          "reportInetCondition": {
            "!type": "fn(networkType: number, percentage: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#reportInetCondition(int, int)"
          },
          "getGlobalProxy": {
            "!type": "fn() -> +android.net.ProxyInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getGlobalProxy()"
          },
          "setBackgroundDataSetting": {
            "!type": "fn(allowBackgroundData: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setBackgroundDataSetting(boolean)"
          },
          "getActiveNetworkQuotaInfo": {
            "!type": "fn() -> +android.net.NetworkQuotaInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkQuotaInfo()"
          },
          "requestRouteToHost": {
            "!type": "fn(networkType: number, hostAddress: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#requestRouteToHost(int, int)"
          },
          "setAirplaneMode": {
            "!type": "fn(enable: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setAirplaneMode(boolean)"
          },
          "getNetworkForType": {
            "!type": "fn(networkType: number) -> +android.net.Network",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkForType(int)"
          },
          "getTetherableBluetoothRegexs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetherableBluetoothRegexs()"
          },
          "getNetworkPreference": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkPreference()"
          },
          "getBackgroundDataSetting": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getBackgroundDataSetting()"
          },
          "registerNetworkCallback": {
            "!type": "fn(request: +android.net.NetworkRequest, networkCallback: +android.net.ConnectivityManager.NetworkCallback) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getProxyForNetwork": {
            "!type": "fn(network: +android.net.Network) -> +android.net.ProxyInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getProxyForNetwork(android.net.Network)"
          },
          "checkMobileProvisioning": {
            "!type": "fn(suggestedTimeOutMs: number) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#checkMobileProvisioning(int)"
          },
          "getMobileDataEnabled": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getMobileDataEnabled()"
          },
          "getLinkProperties": {
            "!type": "fn(networkType: number) -> +android.net.LinkProperties",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getLinkProperties(int)"
          },
          "unregisterNetworkCallback": {
            "!type": "fn(networkCallback: +android.net.ConnectivityManager.NetworkCallback) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"
          },
          "getBoundNetworkForProcess": {
            "!type": "fn() -> +android.net.Network",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getBoundNetworkForProcess()"
          },
          "stopUsingNetworkFeature": {
            "!type": "fn(networkType: number, feature: string) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#stopUsingNetworkFeature(int, java.lang.String)"
          },
          "tether": {
            "!type": "fn(iface: string) -> number",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#tether(java.lang.String)"
          },
          "getDefaultNetworkCapabilitiesForUser": {
            "!type": "fn(userId: number) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getDefaultNetworkCapabilitiesForUser(int)"
          },
          "getTetherableUsbRegexs": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetherableUsbRegexs()"
          },
          "isActiveNetworkMetered": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isActiveNetworkMetered()"
          },
          "setProvisioningNotificationVisible": {
            "!type": "fn(visible: bool, networkType: number, action: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#setProvisioningNotificationVisible(boolean, int, java.lang.String)"
          },
          "getNetworkCapabilities": {
            "!type": "fn(network: +android.net.Network) -> +android.net.NetworkCapabilities",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkCapabilities(android.net.Network)"
          },
          "updateLockdownVpn": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#updateLockdownVpn()"
          },
          "isNetworkSupported": {
            "!type": "fn(networkType: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkSupported(int)"
          },
          "getNetworkInfo": {
            "!type": "fn(networkType: number) -> +android.net.NetworkInfo",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkInfo(int)"
          },
          "getTetheredIfaces": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetheredIfaces()"
          },
          "getTetheredDhcpRanges": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetheredDhcpRanges()"
          },
          "getTetherableIfaces": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetherableIfaces()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getAllNetworkInfo": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworkInfo()"
          },
          "bindProcessToNetwork": {
            "!type": "fn(network: +android.net.Network) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#bindProcessToNetwork(android.net.Network)"
          },
          "releaseNetworkRequest": {
            "!type": "fn(operation: +android.app.PendingIntent) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#releaseNetworkRequest(android.app.PendingIntent)"
          },
          "getMobileProvisioningUrl": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getMobileProvisioningUrl()"
          },
          "removeDefaultNetworkActiveListener": {
            "!type": "fn(l: +android.net.ConnectivityManager.OnNetworkActiveListener) -> void",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"
          },
          "getTetheringErroredIfaces": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/ConnectivityManager.html#getTetheringErroredIfaces()"
          }
        }
      },
      "NetworkInfo": {
        "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html",
        "!type": "fn(type: number, subtype: number, typeName: string, subtypeName: string)",
        "State": {
          "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html",
          "DISCONNECTED": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#DISCONNECTED"
          },
          "DISCONNECTING": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#DISCONNECTING"
          },
          "SUSPENDED": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#SUSPENDED"
          },
          "CONNECTED": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#CONNECTED"
          },
          "UNKNOWN": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#UNKNOWN"
          },
          "CONNECTING": {
            "!type": "+android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#CONNECTING"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.State.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "DetailedState": {
          "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html",
          "DISCONNECTED": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#DISCONNECTED"
          },
          "OBTAINING_IPADDR": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#OBTAINING_IPADDR"
          },
          "DISCONNECTING": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#DISCONNECTING"
          },
          "BLOCKED": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#BLOCKED"
          },
          "FAILED": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#FAILED"
          },
          "IDLE": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#IDLE"
          },
          "AUTHENTICATING": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#AUTHENTICATING"
          },
          "CAPTIVE_PORTAL_CHECK": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#CAPTIVE_PORTAL_CHECK"
          },
          "VERIFYING_POOR_LINK": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#VERIFYING_POOR_LINK"
          },
          "SUSPENDED": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#SUSPENDED"
          },
          "SCANNING": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#SCANNING"
          },
          "CONNECTING": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#CONNECTING"
          },
          "CONNECTED": {
            "!type": "+android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#CONNECTED"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.DetailedState.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#CREATOR"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "getDetailedState": {
            "!type": "fn() -> +android.net.NetworkInfo.DetailedState",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getDetailedState()"
          },
          "setIsAvailable": {
            "!type": "fn(isAvailable: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setIsAvailable(boolean)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getSubtypeName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getSubtypeName()"
          },
          "isRoaming": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#isRoaming()"
          },
          "setExtraInfo": {
            "!type": "fn(extraInfo: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setExtraInfo(java.lang.String)"
          },
          "setSubtype": {
            "!type": "fn(subtype: number, subtypeName: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setSubtype(int, java.lang.String)"
          },
          "setRoaming": {
            "!type": "fn(isRoaming: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setRoaming(boolean)"
          },
          "setDetailedState": {
            "!type": "fn(detailedState: +android.net.NetworkInfo.DetailedState, reason: string, extraInfo: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setDetailedState(android.net.NetworkInfo.DetailedState, java.lang.String, java.lang.String)"
          },
          "getTypeName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getTypeName()"
          },
          "isConnectedOrConnecting": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#isConnectedOrConnecting()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#describeContents()"
          },
          "isAvailable": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#isAvailable()"
          },
          "setType": {
            "!type": "fn(type: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setType(int)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setFailover": {
            "!type": "fn(isFailover: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#setFailover(boolean)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getState": {
            "!type": "fn() -> +android.net.NetworkInfo.State",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getState()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#toString()"
          },
          "getExtraInfo": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getExtraInfo()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getType()"
          },
          "getReason": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getReason()"
          },
          "isFailover": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#isFailover()"
          },
          "isConnected": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#isConnected()"
          },
          "getSubtype": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkInfo.html#getSubtype()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "MobileLinkQualityInfo": {
        "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#CREATOR"
        },
        "UNKNOWN_INT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_INT"
        },
        "NORMALIZED_MIN_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MIN_SIGNAL_STRENGTH"
        },
        "NORMALIZED_SIGNAL_STRENGTH_RANGE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_SIGNAL_STRENGTH_RANGE"
        },
        "UNKNOWN_LONG": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_LONG"
        },
        "NORMALIZED_MAX_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MAX_SIGNAL_STRENGTH"
        },
        "createFromParcelBody": {
          "!type": "fn(in: +android.os.Parcel) -> +android.net.MobileLinkQualityInfo",
          "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#createFromParcelBody(android.os.Parcel)"
        },
        "prototype": {
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#describeContents()"
          },
          "setTheoreticalLatency": {
            "!type": "fn(theoreticalLatency: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalLatency(int)"
          },
          "setPacketErrorCount": {
            "!type": "fn(packetErrorCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketErrorCount(long)"
          },
          "getCdmaEcio": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getCdmaEcio()"
          },
          "getDataSampleDuration": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getDataSampleDuration()"
          },
          "getEvdoSnr": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getEvdoSnr()"
          },
          "getLteRssnr": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getLteRssnr()"
          },
          "getMobileNetworkType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getMobileNetworkType()"
          },
          "getPacketErrorCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketErrorCount()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "setTheoreticalTxBandwidth": {
            "!type": "fn(theoreticalTxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalTxBandwidth(int)"
          },
          "getLastDataSampleTime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getLastDataSampleTime()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getCdmaDbm": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getCdmaDbm()"
          },
          "setEvdoDbm": {
            "!type": "fn(evdoDbm: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setEvdoDbm(int)"
          },
          "setCdmaEcio": {
            "!type": "fn(cdmaEcio: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setCdmaEcio(int)"
          },
          "getGsmErrorRate": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getGsmErrorRate()"
          },
          "getLteCqi": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getLteCqi()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setTheoreticalRxBandwidth": {
            "!type": "fn(theoreticalRxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalRxBandwidth(int)"
          },
          "setLteRssnr": {
            "!type": "fn(lteRssnr: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setLteRssnr(int)"
          },
          "getRssi": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getRssi()"
          },
          "setLteRsrq": {
            "!type": "fn(lteRsrq: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setLteRsrq(int)"
          },
          "setLteRsrp": {
            "!type": "fn(lteRsrp: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setLteRsrp(int)"
          },
          "setRssi": {
            "!type": "fn(Rssi: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setRssi(int)"
          },
          "getTheoreticalLatency": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalLatency()"
          },
          "setLteCqi": {
            "!type": "fn(lteCqi: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setLteCqi(int)"
          },
          "getNormalizedSignalStrength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNormalizedSignalStrength()"
          },
          "getTheoreticalTxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalTxBandwidth()"
          },
          "setPacketCount": {
            "!type": "fn(packetCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketCount(long)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "setEvdoSnr": {
            "!type": "fn(evdoSnr: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setEvdoSnr(int)"
          },
          "setLteSignalStrength": {
            "!type": "fn(lteSignalStrength: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setLteSignalStrength(int)"
          },
          "getTheoreticalRxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalRxBandwidth()"
          },
          "setNetworkType": {
            "!type": "fn(networkType: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNetworkType(int)"
          },
          "setGsmErrorRate": {
            "!type": "fn(gsmErrorRate: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setGsmErrorRate(int)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "setDataSampleDuration": {
            "!type": "fn(dataSampleDuration: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setDataSampleDuration(int)"
          },
          "getPacketCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketCount()"
          },
          "getEvdoEcio": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getEvdoEcio()"
          },
          "setMobileNetworkType": {
            "!type": "fn(mobileNetworkType: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setMobileNetworkType(int)"
          },
          "setCdmaDbm": {
            "!type": "fn(cdmaDbm: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setCdmaDbm(int)"
          },
          "getEvdoDbm": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getEvdoDbm()"
          },
          "setLastDataSampleTime": {
            "!type": "fn(lastDataSampleTime: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setLastDataSampleTime(long)"
          },
          "getLteRsrq": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getLteRsrq()"
          },
          "setNormalizedSignalStrength": {
            "!type": "fn(normalizedSignalStrength: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNormalizedSignalStrength(int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getLteRsrp": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getLteRsrp()"
          },
          "getLteSignalStrength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#getLteSignalStrength()"
          },
          "getNetworkType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNetworkType()"
          },
          "setEvdoEcio": {
            "!type": "fn(evdoEcio: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/MobileLinkQualityInfo.html#setEvdoEcio(int)"
          }
        }
      },
      "NetworkStatsTest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html",
        "!type": "fn()",
        "prototype": {
          "testSubtractIdenticalRows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testSubtractIdenticalRows()"
          },
          "testAddAllValues": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testAddAllValues()"
          },
          "testMigrateTun": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testMigrateTun()"
          },
          "testWithoutUid": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testWithoutUid()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testGetTotal": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testGetTotal()"
          },
          "testGroupedByIface": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testGroupedByIface()"
          },
          "testFindIndex": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testFindIndex()"
          },
          "testGroupedByIfaceEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testGroupedByIfaceEmpty()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testSubtractNewRows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testSubtractNewRows()"
          },
          "testSubtractIdenticalData": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testSubtractIdenticalData()"
          },
          "testTotalBytes": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testTotalBytes()"
          },
          "testFindIndexHinted": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testFindIndexHinted()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testSubtractMissingRows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testSubtractMissingRows()"
          },
          "testClone": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testClone()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "testAddWhenEmpty": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testAddWhenEmpty()"
          },
          "testGroupedByIfaceAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testGroupedByIfaceAll()"
          },
          "testCombineExisting": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testCombineExisting()"
          },
          "testAddEntryGrow": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsTest.html#testAddEntryGrow()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "Proxy": {
        "!url": "http://developer.android.com/reference/android/net/Proxy.html",
        "!type": "fn()",
        "PROXY_EXCLLIST_INVALID": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_EXCLLIST_INVALID"
        },
        "PROXY_HOSTNAME_EMPTY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_HOSTNAME_EMPTY"
        },
        "PROXY_VALID": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_VALID"
        },
        "EXTRA_PROXY_INFO": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#EXTRA_PROXY_INFO"
        },
        "PROXY_PORT_INVALID": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_PORT_INVALID"
        },
        "PROXY_CHANGE_ACTION": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_CHANGE_ACTION"
        },
        "PROXY_HOSTNAME_INVALID": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_HOSTNAME_INVALID"
        },
        "PROXY_PORT_EMPTY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#PROXY_PORT_EMPTY"
        },
        "getDefaultHost": {
          "!type": "fn() -> string",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#getDefaultHost()"
        },
        "setHttpProxySystemProperty": {
          "!type": "fn(p: +android.net.ProxyInfo) -> void",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#setHttpProxySystemProperty(android.net.ProxyInfo)"
        },
        "getPort": {
          "!type": "fn(ctx: +android.content.Context) -> number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#getPort(android.content.Context)"
        },
        "validate": {
          "!type": "fn(hostname: string, port: string, exclList: string) -> number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#validate(java.lang.String, java.lang.String, java.lang.String)"
        },
        "getDefaultPort": {
          "!type": "fn() -> number",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#getDefaultPort()"
        },
        "getHost": {
          "!type": "fn(ctx: +android.content.Context) -> string",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#getHost(android.content.Context)"
        },
        "getProxy": {
          "!type": "fn(ctx: +android.content.Context, url: string) -> +java.net.Proxy",
          "!url": "http://developer.android.com/reference/android/net/Proxy.html#getProxy(android.content.Context, java.lang.String)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "NetworkQuotaInfo": {
        "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html",
        "!type": "fn(estimatedBytes: +java.lang.Long, softLimitBytes: +java.lang.Long, hardLimitBytes: +java.lang.Long)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#CREATOR"
        },
        "NO_LIMIT": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#NO_LIMIT"
        },
        "prototype": {
          "getSoftLimitBytes": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#getSoftLimitBytes()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getHardLimitBytes": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#getHardLimitBytes()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getEstimatedBytes": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkQuotaInfo.html#getEstimatedBytes()"
          }
        }
      },
      "NetworkUtils": {
        "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html",
        "!type": "fn()",
        "RESET_ALL_ADDRESSES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#RESET_ALL_ADDRESSES"
        },
        "RESET_IPV6_ADDRESSES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#RESET_IPV6_ADDRESSES"
        },
        "RESET_IPV4_ADDRESSES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#RESET_IPV4_ADDRESSES"
        },
        "prefixLengthToNetmaskInt": {
          "!type": "fn(prefixLength: number) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#prefixLengthToNetmaskInt(int)"
        },
        "bindSocketToNetwork": {
          "!type": "fn(socketfd: number, netId: number) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#bindSocketToNetwork(int, int)"
        },
        "trimV4AddrZeros": {
          "!type": "fn(addr: string) -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#trimV4AddrZeros(java.lang.String)"
        },
        "inetAddressToInt": {
          "!type": "fn(inetAddr: +java.net.Inet4Address) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#inetAddressToInt(java.net.Inet4Address)"
        },
        "releaseDhcpLease": {
          "!type": "fn(interfaceName: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#releaseDhcpLease(java.lang.String)"
        },
        "getDhcpError": {
          "!type": "fn() -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#getDhcpError()"
        },
        "protectFromVpn": {
          "!type": "fn(fd: +java.io.FileDescriptor) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#protectFromVpn(java.io.FileDescriptor)"
        },
        "netmaskToPrefixLength": {
          "!type": "fn(netmask: +java.net.Inet4Address) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#netmaskToPrefixLength(java.net.Inet4Address)"
        },
        "getDhcpResults": {
          "!type": "fn(interfaceName: string, dhcpResults: +android.net.DhcpResults) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#getDhcpResults(java.lang.String, android.net.DhcpResults)"
        },
        "netmaskIntToPrefixLength": {
          "!type": "fn(netmask: number) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#netmaskIntToPrefixLength(int)"
        },
        "intToInetAddress": {
          "!type": "fn(hostAddress: number) -> +java.net.InetAddress",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#intToInetAddress(int)"
        },
        "attachDhcpFilter": {
          "!type": "fn(fd: +java.io.FileDescriptor) -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#attachDhcpFilter(java.io.FileDescriptor)"
        },
        "makeStrings": {
          "!type": "fn(addrs: +java.util.Collection) -> +java.newArray",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#makeStrings(java.util.Collection)"
        },
        "runDhcp": {
          "!type": "fn(interfaceName: string, dhcpResults: +android.net.DhcpResults) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#runDhcp(java.lang.String, android.net.DhcpResults)"
        },
        "getImplicitNetmask": {
          "!type": "fn(address: +java.net.Inet4Address) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#getImplicitNetmask(java.net.Inet4Address)"
        },
        "addressTypeMatches": {
          "!type": "fn(left: +java.net.InetAddress, right: +java.net.InetAddress) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#addressTypeMatches(java.net.InetAddress, java.net.InetAddress)"
        },
        "hexToInet6Address": {
          "!type": "fn(addrHexString: string) -> +java.net.InetAddress",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#hexToInet6Address(java.lang.String)"
        },
        "numericToInetAddress": {
          "!type": "fn(addrString: string) -> +java.net.InetAddress",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#numericToInetAddress(java.lang.String)"
        },
        "getNetworkPart": {
          "!type": "fn(address: +java.net.InetAddress, prefixLength: number) -> +java.net.InetAddress",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#getNetworkPart(java.net.InetAddress, int)"
        },
        "maskRawAddress": {
          "!type": "fn(array: +java.newArray, prefixLength: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#maskRawAddress(byte[], int)"
        },
        "bindProcessToNetwork": {
          "!type": "fn(netId: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#bindProcessToNetwork(int)"
        },
        "startDhcpRenew": {
          "!type": "fn(interfaceName: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#startDhcpRenew(java.lang.String)"
        },
        "stopDhcp": {
          "!type": "fn(interfaceName: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#stopDhcp(java.lang.String)"
        },
        "queryUserAccess": {
          "!type": "fn(uid: number, netId: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#queryUserAccess(int, int)"
        },
        "bindProcessToNetworkForHostResolution": {
          "!type": "fn(netId: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#bindProcessToNetworkForHostResolution(int)"
        },
        "runDhcpRenew": {
          "!type": "fn(interfaceName: string, dhcpResults: +android.net.DhcpResults) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#runDhcpRenew(java.lang.String, android.net.DhcpResults)"
        },
        "parseIpAndMask": {
          "!type": "fn(ipAndMaskString: string) -> +android.util.Pair",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#parseIpAndMask(java.lang.String)"
        },
        "getBoundNetworkForProcess": {
          "!type": "fn() -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#getBoundNetworkForProcess()"
        },
        "resetConnections": {
          "!type": "fn(interfaceName: string, mask: number) -> number",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#resetConnections(java.lang.String, int)"
        },
        "startDhcp": {
          "!type": "fn(interfaceName: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkUtils.html#startDhcp(java.lang.String)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "PskKeyManager": {
        "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html",
        "!type": "fn()",
        "MAX_IDENTITY_LENGTH_BYTES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_IDENTITY_LENGTH_BYTES"
        },
        "MAX_IDENTITY_HINT_LENGTH_BYTES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_IDENTITY_HINT_LENGTH_BYTES"
        },
        "MAX_KEY_LENGTH_BYTES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#MAX_KEY_LENGTH_BYTES"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getKey": {
            "!type": "fn(identityHint: string, identity: string, socket: +java.net.Socket) -> +javax.crypto.SecretKey",
            "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#getKey(java.lang.String, java.lang.String, java.net.Socket)"
          },
          "chooseServerKeyIdentityHint": {
            "!type": "fn(socket: +java.net.Socket) -> string",
            "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#chooseServerKeyIdentityHint(java.net.Socket)"
          },
          "chooseClientKeyIdentity": {
            "!type": "fn(identityHint: string, socket: +java.net.Socket) -> string",
            "!url": "http://developer.android.com/reference/android/net/PskKeyManager.html#chooseClientKeyIdentity(java.lang.String, java.net.Socket)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "CaptivePortal": {
        "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html",
        "!type": "fn(binder: +android.os.IBinder)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#CREATOR"
        },
        "APP_RETURN_UNWANTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#APP_RETURN_UNWANTED"
        },
        "APP_RETURN_WANTED_AS_IS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#APP_RETURN_WANTED_AS_IS"
        },
        "APP_RETURN_DISMISSED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#APP_RETURN_DISMISSED"
        },
        "prototype": {
          "reportCaptivePortalDismissed": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#reportCaptivePortalDismissed()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#writeToParcel(android.os.Parcel, int)"
          },
          "ignoreNetwork": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#ignoreNetwork()"
          },
          "useNetwork": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/CaptivePortal.html#useNetwork()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "LinkPropertiesTest": {
        "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testEqualsNull": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testEqualsNull()"
          },
          "testEqualsSameOrder": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testEqualsSameOrder()"
          },
          "testIsProvisioned": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testIsProvisioned()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testSetLinkAddresses": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testSetLinkAddresses()"
          },
          "testRouteInterfaces": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testRouteInterfaces()"
          },
          "testStackedInterfaces": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testStackedInterfaces()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "testEqualsDifferentOrder": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testEqualsDifferentOrder()"
          },
          "testIsReachable": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testIsReachable()"
          },
          "assertLinkPropertiesEqual": {
            "!type": "fn(source: +android.net.LinkProperties, target: +android.net.LinkProperties) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#assertLinkPropertiesEqual(android.net.LinkProperties, android.net.LinkProperties)"
          },
          "testEqualsDuplicated": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testEqualsDuplicated()"
          },
          "testAddressMethods": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testAddressMethods()"
          },
          "testCompareProvisioning": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkPropertiesTest.html#testCompareProvisioning()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "NetworkScoreManager": {
        "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html",
        "!type": "fn(context: +android.content.Context)",
        "ACTION_SCORE_NETWORKS": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#ACTION_SCORE_NETWORKS"
        },
        "EXTRA_NEW_SCORER": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#EXTRA_NEW_SCORER"
        },
        "EXTRA_PACKAGE_NAME": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#EXTRA_PACKAGE_NAME"
        },
        "ACTION_CHANGE_ACTIVE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#ACTION_CHANGE_ACTIVE"
        },
        "ACTION_SCORER_CHANGED": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#ACTION_SCORER_CHANGED"
        },
        "EXTRA_NETWORKS_TO_SCORE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#EXTRA_NETWORKS_TO_SCORE"
        },
        "ACTION_CUSTOM_ENABLE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#ACTION_CUSTOM_ENABLE"
        },
        "prototype": {
          "setActiveScorer": {
            "!type": "fn(packageName: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#setActiveScorer(java.lang.String)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "clearScores": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#clearScores()"
          },
          "registerNetworkScoreCache": {
            "!type": "fn(networkType: number, scoreCache: INetworkScoreCache) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#registerNetworkScoreCache(int, INetworkScoreCache)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getActiveScorerPackage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#getActiveScorerPackage()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "updateScores": {
            "!type": "fn(networks: +java.newArray) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#updateScores(android.net.ScoredNetwork[])"
          },
          "requestScores": {
            "!type": "fn(networks: +java.newArray) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#requestScores(android.net.NetworkKey[])"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "disableScoring": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkScoreManager.html#disableScoring()"
          }
        }
      },
      "LocalSocket": {
        "!url": "http://developer.android.com/reference/android/net/LocalSocket.html",
        "!type": "fn()",
        "SOCKET_STREAM": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#SOCKET_STREAM"
        },
        "SOCKET_SEQPACKET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#SOCKET_SEQPACKET"
        },
        "SOCKET_DGRAM": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#SOCKET_DGRAM"
        },
        "prototype": {
          "connect": {
            "!type": "fn(endpoint: +android.net.LocalSocketAddress) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#connect(android.net.LocalSocketAddress)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getRemoteSocketAddress": {
            "!type": "fn() -> +android.net.LocalSocketAddress",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getRemoteSocketAddress()"
          },
          "isBound": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#isBound()"
          },
          "shutdownInput": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#shutdownInput()"
          },
          "getFileDescriptor": {
            "!type": "fn() -> +java.io.FileDescriptor",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getFileDescriptor()"
          },
          "getOutputStream": {
            "!type": "fn() -> +java.io.OutputStream",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getOutputStream()"
          },
          "getInputStream": {
            "!type": "fn() -> +java.io.InputStream",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getInputStream()"
          },
          "isInputShutdown": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#isInputShutdown()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getSoTimeout": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getSoTimeout()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getSendBufferSize": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getSendBufferSize()"
          },
          "close": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#close()"
          },
          "isClosed": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#isClosed()"
          },
          "setReceiveBufferSize": {
            "!type": "fn(size: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#setReceiveBufferSize(int)"
          },
          "getPeerCredentials": {
            "!type": "fn() -> +android.net.Credentials",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getPeerCredentials()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getAncillaryFileDescriptors": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getAncillaryFileDescriptors()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "isConnected": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#isConnected()"
          },
          "getReceiveBufferSize": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getReceiveBufferSize()"
          },
          "isOutputShutdown": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#isOutputShutdown()"
          },
          "shutdownOutput": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#shutdownOutput()"
          },
          "getLocalSocketAddress": {
            "!type": "fn() -> +android.net.LocalSocketAddress",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#getLocalSocketAddress()"
          },
          "setFileDescriptorsForSend": {
            "!type": "fn(fds: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#setFileDescriptorsForSend(java.io.FileDescriptor[])"
          },
          "setSoTimeout": {
            "!type": "fn(n: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#setSoTimeout(int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "bind": {
            "!type": "fn(bindpoint: +android.net.LocalSocketAddress) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#bind(android.net.LocalSocketAddress)"
          },
          "setSendBufferSize": {
            "!type": "fn(n: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocket.html#setSendBufferSize(int)"
          }
        }
      },
      "SSLSessionCacheTest": {
        "!url": "http://developer.android.com/reference/android/net/SSLSessionCacheTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testInstall_compatibleContext": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLSessionCacheTest.html#testInstall_compatibleContext()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testInstall_incompatibleContext": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLSessionCacheTest.html#testInstall_incompatibleContext()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkStatsHistory": {
        "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html",
        "!type": "fn(bucketDuration: +java.lang.Long)",
        "Entry": {
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.Entry.html",
          "!type": "fn()",
          "UNKNOWN": {
            "!type": "+java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.Entry.html#UNKNOWN"
          },
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "DataStreamUtils": {
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html",
          "!type": "fn()",
          "writeVarLong": {
            "!type": "fn(out: +java.io.DataOutputStream, value: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html#writeVarLong(java.io.DataOutputStream, long)"
          },
          "writeVarLongArray": {
            "!type": "fn(out: +java.io.DataOutputStream, values: +java.newArray, size: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html#writeVarLongArray(java.io.DataOutputStream, long[], int)"
          },
          "readVarLong": {
            "!type": "fn(in: +java.io.DataInputStream) -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html#readVarLong(java.io.DataInputStream)"
          },
          "readVarLongArray": {
            "!type": "fn(in: +java.io.DataInputStream) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html#readVarLongArray(java.io.DataInputStream)"
          },
          "readFullLongArray": {
            "!type": "fn(in: +java.io.DataInputStream) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.DataStreamUtils.html#readFullLongArray(java.io.DataInputStream)"
          },
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "ParcelUtils": {
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.ParcelUtils.html",
          "!type": "fn()",
          "readLongArray": {
            "!type": "fn(in: +android.os.Parcel) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.ParcelUtils.html#readLongArray(android.os.Parcel)"
          },
          "writeLongArray": {
            "!type": "fn(out: +android.os.Parcel, values: +java.newArray, size: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.ParcelUtils.html#writeLongArray(android.os.Parcel, long[], int)"
          },
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#CREATOR"
        },
        "FIELD_RX_BYTES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_RX_BYTES"
        },
        "FIELD_TX_PACKETS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_TX_PACKETS"
        },
        "FIELD_RX_PACKETS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_RX_PACKETS"
        },
        "FIELD_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_ALL"
        },
        "FIELD_ACTIVE_TIME": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_ACTIVE_TIME"
        },
        "FIELD_OPERATIONS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_OPERATIONS"
        },
        "FIELD_TX_BYTES": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#FIELD_TX_BYTES"
        },
        "randomLong": {
          "!type": "fn(r: +java.util.Random, start: +java.lang.Long, end: +java.lang.Long) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#randomLong(java.util.Random, long, long)"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#writeToParcel(android.os.Parcel, int)"
          },
          "getValues": {
            "!type": "fn(i: number, recycle: +android.net.NetworkStatsHistory.Entry) -> +android.net.NetworkStatsHistory.Entry",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getValues(int, android.net.NetworkStatsHistory.Entry)"
          },
          "intersects": {
            "!type": "fn(start: +java.lang.Long, end: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#intersects(long, long)"
          },
          "dumpCheckin": {
            "!type": "fn(pw: +java.io.PrintWriter) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#dumpCheckin(java.io.PrintWriter)"
          },
          "getIndexBefore": {
            "!type": "fn(time: +java.lang.Long) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getIndexBefore(long)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getIndexAfter": {
            "!type": "fn(time: +java.lang.Long) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getIndexAfter(long)"
          },
          "getBucketDuration": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getBucketDuration()"
          },
          "recordEntireHistory": {
            "!type": "fn(input: +android.net.NetworkStatsHistory) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#recordEntireHistory(android.net.NetworkStatsHistory)"
          },
          "dump": {
            "!type": "fn(pw: +com.android.internal.util.IndentingPrintWriter, fullHistory: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#dump(com.android.internal.util.IndentingPrintWriter, boolean)"
          },
          "getTotalBytes": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getTotalBytes()"
          },
          "removeBucketsBefore": {
            "!type": "fn(cutoff: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#removeBucketsBefore(long)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "size": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#size()"
          },
          "generateRandom": {
            "!type": "fn(start: +java.lang.Long, end: +java.lang.Long, bytes: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#generateRandom(long, long, long)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getEnd": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getEnd()"
          },
          "getStart": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#getStart()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "estimateResizeBuckets": {
            "!type": "fn(newBucketDuration: +java.lang.Long) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#estimateResizeBuckets(long)"
          },
          "writeToStream": {
            "!type": "fn(out: +java.io.DataOutputStream) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#writeToStream(java.io.DataOutputStream)"
          },
          "recordData": {
            "!type": "fn(start: +java.lang.Long, end: +java.lang.Long, rxBytes: +java.lang.Long, txBytes: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#recordData(long, long, long, long)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "recordHistory": {
            "!type": "fn(input: +android.net.NetworkStatsHistory, start: +java.lang.Long, end: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistory.html#recordHistory(android.net.NetworkStatsHistory, long, long)"
          }
        }
      },
      "TrafficStats": {
        "!url": "http://developer.android.com/reference/android/net/TrafficStats.html",
        "!type": "fn()",
        "UID_REMOVED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#UID_REMOVED"
        },
        "MB_IN_BYTES": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#MB_IN_BYTES"
        },
        "PB_IN_BYTES": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#PB_IN_BYTES"
        },
        "TAG_SYSTEM_MEDIA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#TAG_SYSTEM_MEDIA"
        },
        "TB_IN_BYTES": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#TB_IN_BYTES"
        },
        "UID_TETHERING": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#UID_TETHERING"
        },
        "UNSUPPORTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#UNSUPPORTED"
        },
        "TAG_SYSTEM_DOWNLOAD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#TAG_SYSTEM_DOWNLOAD"
        },
        "TAG_SYSTEM_BACKUP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#TAG_SYSTEM_BACKUP"
        },
        "GB_IN_BYTES": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#GB_IN_BYTES"
        },
        "KB_IN_BYTES": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#KB_IN_BYTES"
        },
        "getUidRxPackets": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidRxPackets(int)"
        },
        "getTotalTxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTotalTxPackets()"
        },
        "getUidUdpTxPackets": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidUdpTxPackets(int)"
        },
        "getMobileTxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileTxPackets()"
        },
        "getTxPackets": {
          "!type": "fn(iface: string) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTxPackets(java.lang.String)"
        },
        "getTotalRxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTotalRxPackets()"
        },
        "setThreadStatsUid": {
          "!type": "fn(uid: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#setThreadStatsUid(int)"
        },
        "getUidUdpRxPackets": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidUdpRxPackets(int)"
        },
        "clearThreadStatsTag": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#clearThreadStatsTag()"
        },
        "getMobileRxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileRxPackets()"
        },
        "getRxPackets": {
          "!type": "fn(iface: string) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getRxPackets(java.lang.String)"
        },
        "getUidUdpRxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidUdpRxBytes(int)"
        },
        "getUidUdpTxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidUdpTxBytes(int)"
        },
        "getUidTcpTxSegments": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTcpTxSegments(int)"
        },
        "startDataProfiling": {
          "!type": "fn(context: +android.content.Context) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#startDataProfiling(android.content.Context)"
        },
        "getThreadStatsTag": {
          "!type": "fn() -> number",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getThreadStatsTag()"
        },
        "setThreadStatsTagBackup": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#setThreadStatsTagBackup()"
        },
        "clearThreadStatsUid": {
          "!type": "fn() -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#clearThreadStatsUid()"
        },
        "getUidRxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidRxBytes(int)"
        },
        "getUidTxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTxBytes(int)"
        },
        "getRxBytes": {
          "!type": "fn(iface: string) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getRxBytes(java.lang.String)"
        },
        "getTxBytes": {
          "!type": "fn(iface: string) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTxBytes(java.lang.String)"
        },
        "getTotalRxBytes": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTotalRxBytes()"
        },
        "getUidTcpRxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTcpRxBytes(int)"
        },
        "untagSocket": {
          "!type": "fn(socket: +java.net.Socket) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#untagSocket(java.net.Socket)"
        },
        "getTotalTxBytes": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getTotalTxBytes()"
        },
        "getUidTcpTxBytes": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTcpTxBytes(int)"
        },
        "incrementOperationCount": {
          "!type": "fn(operationCount: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#incrementOperationCount(int)"
        },
        "tagSocket": {
          "!type": "fn(socket: +java.net.Socket) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#tagSocket(java.net.Socket)"
        },
        "closeQuietly": {
          "!type": "fn(session: INetworkStatsSession) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#closeQuietly(INetworkStatsSession)"
        },
        "getMobileRxBytes": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileRxBytes()"
        },
        "getMobileTxBytes": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileTxBytes()"
        },
        "stopDataProfiling": {
          "!type": "fn(context: +android.content.Context) -> +android.net.NetworkStats",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#stopDataProfiling(android.content.Context)"
        },
        "getMobileTcpTxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileTcpTxPackets()"
        },
        "getUidTxPackets": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTxPackets(int)"
        },
        "setThreadStatsTag": {
          "!type": "fn(tag: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#setThreadStatsTag(int)"
        },
        "getUidTcpRxSegments": {
          "!type": "fn(uid: number) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getUidTcpRxSegments(int)"
        },
        "getMobileTcpRxPackets": {
          "!type": "fn() -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/TrafficStats.html#getMobileTcpRxPackets()"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "WebAddressTest": {
        "!url": "http://developer.android.com/reference/android/net/WebAddressTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testPathWithoutLeadingSlash": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddressTest.html#testPathWithoutLeadingSlash()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testHostWithTrailingDot": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddressTest.html#testHostWithTrailingDot()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "StaticIpConfiguration": {
        "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#describeContents()"
          },
          "getRoutes": {
            "!type": "fn(iface: string) -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#getRoutes(java.lang.String)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "clear": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#clear()"
          },
          "toLinkProperties": {
            "!type": "fn(iface: string) -> +android.net.LinkProperties",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#toLinkProperties(java.lang.String)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfiguration.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "RouteInfoTest": {
        "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testMulticastRoute": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testMulticastRoute()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testMatches": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testMatches()"
          },
          "testTruncation": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testTruncation()"
          },
          "testConstructor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testConstructor()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "assertParcelingIsLossless": {
            "!type": "fn(r: +android.net.RouteInfo) -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#assertParcelingIsLossless(android.net.RouteInfo)"
          },
          "passThroughParcel": {
            "!type": "fn(r: +android.net.RouteInfo) -> +android.net.RouteInfo",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#passThroughParcel(android.net.RouteInfo)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "testHostAndDefaultRoutes": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testHostAndDefaultRoutes()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testParceling": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testParceling()"
          },
          "testEquals": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfoTest.html#testEquals()"
          }
        }
      },
      "NetworkMisc": {
        "!url": "http://developer.android.com/reference/android/net/NetworkMisc.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkMisc.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkMisc.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkMisc.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "EthernetManager": {
        "!url": "http://developer.android.com/reference/android/net/EthernetManager.html",
        "!type": "fn(context: +android.content.Context, service: IEthernetManager)",
        "prototype": {
          "addListener": {
            "!type": "fn(listener: +android.net.EthernetManager.Listener) -> void",
            "!url": "http://developer.android.com/reference/android/net/EthernetManager.html#addListener(android.net.EthernetManager.Listener)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "isAvailable": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/EthernetManager.html#isAvailable()"
          },
          "removeListener": {
            "!type": "fn(listener: +android.net.EthernetManager.Listener) -> void",
            "!url": "http://developer.android.com/reference/android/net/EthernetManager.html#removeListener(android.net.EthernetManager.Listener)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setConfiguration": {
            "!type": "fn(config: +android.net.IpConfiguration) -> void",
            "!url": "http://developer.android.com/reference/android/net/EthernetManager.html#setConfiguration(android.net.IpConfiguration)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getConfiguration": {
            "!type": "fn() -> +android.net.IpConfiguration",
            "!url": "http://developer.android.com/reference/android/net/EthernetManager.html#getConfiguration()"
          }
        }
      },
      "Network": {
        "!url": "http://developer.android.com/reference/android/net/Network.html",
        "!type": "fn(netId: number)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/Network.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/Network.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/Network.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Network.html#describeContents()"
          },
          "bindSocket": {
            "!type": "fn(socket: +java.net.DatagramSocket) -> void",
            "!url": "http://developer.android.com/reference/android/net/Network.html#bindSocket(java.net.DatagramSocket)"
          },
          "openConnection": {
            "!type": "fn(url: +java.net.URL) -> +java.net.URLConnection",
            "!url": "http://developer.android.com/reference/android/net/Network.html#openConnection(java.net.URL)"
          },
          "getNetworkHandle": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/Network.html#getNetworkHandle()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getByName": {
            "!type": "fn(host: string) -> +java.net.InetAddress",
            "!url": "http://developer.android.com/reference/android/net/Network.html#getByName(java.lang.String)"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/Network.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Network.html#hashCode()"
          },
          "getAllByName": {
            "!type": "fn(host: string) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/Network.html#getAllByName(java.lang.String)"
          },
          "getSocketFactory": {
            "!type": "fn() -> +javax.net.SocketFactory",
            "!url": "http://developer.android.com/reference/android/net/Network.html#getSocketFactory()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "ParseException": {
        "!url": "http://developer.android.com/reference/android/net/ParseException.html",
        "prototype": {
          "initCause": {
            "!type": "fn(throwable: +java.lang.Throwable) -> +java.lang.Throwable",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#initCause(java.lang.Throwable)"
          },
          "getLocalizedMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getLocalizedMessage()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#toString()"
          },
          "getStackTrace": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getStackTrace()"
          },
          "printStackTrace": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#printStackTrace()"
          },
          "addSuppressed": {
            "!type": "fn(throwable: +java.lang.Throwable) -> void",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#addSuppressed(java.lang.Throwable)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "fillInStackTrace": {
            "!type": "fn() -> +java.lang.Throwable",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#fillInStackTrace()"
          },
          "setStackTrace": {
            "!type": "fn(trace: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#setStackTrace(java.lang.StackTraceElement[])"
          },
          "getSuppressed": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getSuppressed()"
          },
          "getCause": {
            "!type": "fn() -> +java.lang.Throwable",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getCause()"
          },
          "getMessage": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Throwable.html#getMessage()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkAgent": {
        "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html",
        "!type": "fn(looper: +android.os.Looper, context: +android.content.Context, logTag: string, ni: +android.net.NetworkInfo, nc: +android.net.NetworkCapabilities, lp: +android.net.LinkProperties, score: number)",
        "INVALID_NETWORK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#INVALID_NETWORK"
        },
        "EVENT_UID_RANGES_ADDED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_UID_RANGES_ADDED"
        },
        "WIFI_BASE_SCORE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#WIFI_BASE_SCORE"
        },
        "EVENT_NETWORK_PROPERTIES_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_NETWORK_PROPERTIES_CHANGED"
        },
        "EVENT_UID_RANGES_REMOVED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_UID_RANGES_REMOVED"
        },
        "EVENT_NETWORK_INFO_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_NETWORK_INFO_CHANGED"
        },
        "EVENT_SET_EXPLICITLY_SELECTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_SET_EXPLICITLY_SELECTED"
        },
        "VALID_NETWORK": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#VALID_NETWORK"
        },
        "CMD_REPORT_NETWORK_STATUS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#CMD_REPORT_NETWORK_STATUS"
        },
        "CMD_REQUEST_BANDWIDTH_UPDATE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#CMD_REQUEST_BANDWIDTH_UPDATE"
        },
        "CMD_SAVE_ACCEPT_UNVALIDATED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#CMD_SAVE_ACCEPT_UNVALIDATED"
        },
        "EVENT_NETWORK_CAPABILITIES_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_NETWORK_CAPABILITIES_CHANGED"
        },
        "CMD_PREVENT_AUTOMATIC_RECONNECT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#CMD_PREVENT_AUTOMATIC_RECONNECT"
        },
        "CMD_SUSPECT_BAD": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#CMD_SUSPECT_BAD"
        },
        "EVENT_NETWORK_SCORE_CHANGED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#EVENT_NETWORK_SCORE_CHANGED"
        },
        "prototype": {
          "handleMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#handleMessage(android.os.Message)"
          },
          "sendMessage": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessage(android.os.Message)"
          },
          "sendEmptyMessageAtTime": {
            "!type": "fn(what: number, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageAtTime(int, long)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#toString()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "sendNetworkCapabilities": {
            "!type": "fn(networkCapabilities: +android.net.NetworkCapabilities) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#sendNetworkCapabilities(android.net.NetworkCapabilities)"
          },
          "addUidRanges": {
            "!type": "fn(ranges: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#addUidRanges(android.net.UidRange[])"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "sendLinkProperties": {
            "!type": "fn(linkProperties: +android.net.LinkProperties) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#sendLinkProperties(android.net.LinkProperties)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "removeCallbacksAndMessages": {
            "!type": "fn(token: +java.lang.Object) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacksAndMessages(java.lang.Object)"
          },
          "postAtTime": {
            "!type": "fn(r: +java.lang.Runnable, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtTime(java.lang.Runnable, long)"
          },
          "sendMessageAtFrontOfQueue": {
            "!type": "fn(msg: +android.os.Message) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtFrontOfQueue(android.os.Message)"
          },
          "sendNetworkInfo": {
            "!type": "fn(networkInfo: +android.net.NetworkInfo) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#sendNetworkInfo(android.net.NetworkInfo)"
          },
          "getLooper": {
            "!type": "fn() -> +android.os.Looper",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getLooper()"
          },
          "post": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#post(java.lang.Runnable)"
          },
          "sendMessageDelayed": {
            "!type": "fn(msg: +android.os.Message, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageDelayed(android.os.Message, long)"
          },
          "hasMessages": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasMessages(int)"
          },
          "sendMessageAtTime": {
            "!type": "fn(msg: +android.os.Message, uptimeMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendMessageAtTime(android.os.Message, long)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "sendNetworkScore": {
            "!type": "fn(score: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#sendNetworkScore(int)"
          },
          "postDelayed": {
            "!type": "fn(r: +java.lang.Runnable, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable, long)"
          },
          "removeMessages": {
            "!type": "fn(what: number) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeMessages(int)"
          },
          "removeUidRanges": {
            "!type": "fn(ranges: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#removeUidRanges(android.net.UidRange[])"
          },
          "dispatchMessage": {
            "!type": "fn(msg: +android.os.Message) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#dispatchMessage(android.os.Message)"
          },
          "removeCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#removeCallbacks(java.lang.Runnable)"
          },
          "sendEmptyMessage": {
            "!type": "fn(what: number) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessage(int)"
          },
          "runWithScissors": {
            "!type": "fn(r: +java.lang.Runnable, timeout: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#runWithScissors(java.lang.Runnable, long)"
          },
          "explicitlySelected": {
            "!type": "fn(acceptUnvalidated: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkAgent.html#explicitlySelected(boolean)"
          },
          "dump": {
            "!type": "fn(pw: +android.util.Printer, prefix: string) -> void",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#dump(android.util.Printer, java.lang.String)"
          },
          "sendEmptyMessageDelayed": {
            "!type": "fn(what: number, delayMillis: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#sendEmptyMessageDelayed(int, long)"
          },
          "hasCallbacks": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#hasCallbacks(java.lang.Runnable)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "obtainMessage": {
            "!type": "fn() -> +android.os.Message",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#obtainMessage()"
          },
          "getMessageName": {
            "!type": "fn(message: +android.os.Message) -> string",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#getMessageName(android.os.Message)"
          },
          "postAtFrontOfQueue": {
            "!type": "fn(r: +java.lang.Runnable) -> bool",
            "!url": "http://developer.android.com/reference/android/os/Handler.html#postAtFrontOfQueue(java.lang.Runnable)"
          }
        }
      },
      "SSLTest": {
        "!url": "http://developer.android.com/reference/android/net/SSLTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testStringsToLengthPrefixedBytesEmptyByteArray": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLTest.html#testStringsToLengthPrefixedBytesEmptyByteArray()"
          },
          "testStringsToLengthPrefixedBytesOversizedInput": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLTest.html#testStringsToLengthPrefixedBytesOversizedInput()"
          },
          "testStringsToLengthPrefixedBytesEmptyArray": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLTest.html#testStringsToLengthPrefixedBytesEmptyArray()"
          },
          "testStringsToLengthPrefixedBytes": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLTest.html#testStringsToLengthPrefixedBytes()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testCertificate": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/SSLTest.html#testCertificate()"
          }
        }
      },
      "LocalSocketTest": {
        "!url": "http://developer.android.com/reference/android/net/LocalSocketTest.html",
        "!type": "fn()",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "testBasic": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketTest.html#testBasic()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "NetworkScorerAppManager": {
        "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html",
        "NetworkScorerAppData": {
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.NetworkScorerAppData.html",
          "!type": "fn(packageName: string, packageUid: number, scorerName: +java.lang.CharSequence, configurationActivityClassName: string)",
          "prototype": {
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
            }
          }
        },
        "setActiveScorer": {
          "!type": "fn(context: +android.content.Context, packageName: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html#setActiveScorer(android.content.Context, java.lang.String)"
        },
        "getActiveScorer": {
          "!type": "fn(context: +android.content.Context) -> +android.net.NetworkScorerAppManager.NetworkScorerAppData",
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html#getActiveScorer(android.content.Context)"
        },
        "isCallerActiveScorer": {
          "!type": "fn(context: +android.content.Context, callingUid: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html#isCallerActiveScorer(android.content.Context, int)"
        },
        "getScorer": {
          "!type": "fn(context: +android.content.Context, packageName: string) -> +android.net.NetworkScorerAppManager.NetworkScorerAppData",
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html#getScorer(android.content.Context, java.lang.String)"
        },
        "getAllValidScorers": {
          "!type": "fn(context: +android.content.Context) -> +java.util.Collection",
          "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManager.html#getAllValidScorers(android.content.Context)"
        },
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "UriTest": {
        "!url": "http://developer.android.com/reference/android/net/UriTest.html",
        "!type": "fn()",
        "prototype": {
          "testGetQueryParameterNamesEmptyKey2": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNamesEmptyKey2()"
          },
          "testGetQueryParametersEmptyKey": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParametersEmptyKey()"
          },
          "testPathPrefixMatch": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testPathPrefixMatch()"
          },
          "testGetQueryParametersEmptyValue": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParametersEmptyValue()"
          },
          "testEncodeDecode": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testEncodeDecode()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "testAuthorityParsing": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testAuthorityParsing()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testGetQueryParameterEdgeCases": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEdgeCases()"
          },
          "testSms": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testSms()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "testPlusCharacterInQuery": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testPlusCharacterInQuery()"
          },
          "testFile": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testFile()"
          },
          "testGetQueryParameter": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameter()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "testHierarchicalUris": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testHierarchicalUris()"
          },
          "testEncodeWithAllowedChars": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testEncodeWithAllowedChars()"
          },
          "testGetQueryParameterEscapedKeys": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEscapedKeys()"
          },
          "testEqualsAndHashCode": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testEqualsAndHashCode()"
          },
          "testParcellingWithoutFragment": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testParcellingWithoutFragment()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testCompareTo": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testCompareTo()"
          },
          "testOpaqueUri": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testOpaqueUri()"
          },
          "testClearQueryParameters": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testClearQueryParameters()"
          },
          "testGetQueryParameterNamesEscapedKeys": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNamesEscapedKeys()"
          },
          "testBuildUponOpaqueStringUri": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testBuildUponOpaqueStringUri()"
          },
          "testEmptyToStringNotNull": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testEmptyToStringNotNull()"
          },
          "testGetQueryParameterNamesEmptyKey": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNamesEmptyKey()"
          },
          "testQueryParameters": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testQueryParameters()"
          },
          "testGetQueryParameterWorkaround": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterWorkaround()"
          },
          "testGetQueryParameterNamesEmptyValues": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNamesEmptyValues()"
          },
          "testHostWithTrailingDot": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testHostWithTrailingDot()"
          },
          "testStringUriIsHierarchical": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testStringUriIsHierarchical()"
          },
          "testGetQueryParameterEmptyKey": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEmptyKey()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testGetQueryParameterEmptyKey4": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEmptyKey4()"
          },
          "testGetQueryParameterEmptyKey3": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEmptyKey3()"
          },
          "testGetQueryParameterEmptyKey2": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterEmptyKey2()"
          },
          "testGetQueryParameterNamesEdgeCases": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNamesEdgeCases()"
          },
          "testSchemeOnly": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testSchemeOnly()"
          },
          "testEmptyPath": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testEmptyPath()"
          },
          "testBuildUponEncodedOpaqueUri": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testBuildUponEncodedOpaqueUri()"
          },
          "testToSafeString": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testToSafeString()"
          },
          "testGetQueryParameterNames": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParameterNames()"
          },
          "testNullFile": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testNullFile()"
          },
          "testBuildUponOpaqueUri": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testBuildUponOpaqueUri()"
          },
          "testPathSegmentDecoding": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testPathSegmentDecoding()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testGetQueryParametersEmptyKey3": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParametersEmptyKey3()"
          },
          "testParcelling": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testParcelling()"
          },
          "testNullUriString": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testNullUriString()"
          },
          "testGetQueryParametersEmptyKey2": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testGetQueryParametersEmptyKey2()"
          },
          "testPathOperations": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testPathOperations()"
          },
          "testToStringWithPathOnly": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testToStringWithPathOnly()"
          },
          "testStringUri": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriTest.html#testStringUri()"
          }
        }
      },
      "ScoredNetwork": {
        "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html",
        "!type": "fn(networkKey: +android.net.NetworkKey, rssiCurve: +android.net.RssiCurve)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/ScoredNetwork.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkUtilsTest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkUtilsTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testNetmaskToPrefixLength": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkUtilsTest.html#testNetmaskToPrefixLength()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testGetImplicitNetmask": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkUtilsTest.html#testGetImplicitNetmask()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "Credentials": {
        "!url": "http://developer.android.com/reference/android/net/Credentials.html",
        "!type": "fn(pid: number, uid: number, gid: number)",
        "prototype": {
          "getPid": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Credentials.html#getPid()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getGid": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Credentials.html#getGid()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getUid": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/Credentials.html#getUid()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkScorerAppManagerTest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManagerTest.html",
        "!type": "fn()",
        "prototype": {
          "launchActivity": {
            "!type": "fn(pkg: string, activityCls: +java.lang.Class, extras: +android.os.Bundle) -> +android.app.Activity",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#launchActivity(java.lang.String, java.lang.Class, android.os.Bundle)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "injectInstrumentation": {
            "!type": "fn(instrumentation: +android.app.Instrumentation) -> void",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#injectInstrumentation(android.app.Instrumentation)"
          },
          "launchActivityWithIntent": {
            "!type": "fn(pkg: string, activityCls: +java.lang.Class, intent: +android.content.Intent) -> +android.app.Activity",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#launchActivityWithIntent(java.lang.String, java.lang.Class, android.content.Intent)"
          },
          "runTestOnUiThread": {
            "!type": "fn(r: +java.lang.Runnable) -> void",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#runTestOnUiThread(java.lang.Runnable)"
          },
          "setUp": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManagerTest.html#setUp()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "sendKeys": {
            "!type": "fn(keysSequence: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#sendKeys(java.lang.String)"
          },
          "testGetAllValidScorers": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkScorerAppManagerTest.html#testGetAllValidScorers()"
          },
          "sendRepeatedKeys": {
            "!type": "fn(keys: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#sendRepeatedKeys(int[])"
          },
          "getInstrumentation": {
            "!type": "fn() -> +android.app.Instrumentation",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#getInstrumentation()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "injectInsrumentation": {
            "!type": "fn(instrumentation: +android.app.Instrumentation) -> void",
            "!url": "http://developer.android.com/reference/android/test/InstrumentationTestCase.html#injectInsrumentation(android.app.Instrumentation)"
          }
        }
      },
      "InterfaceConfiguration": {
        "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#CREATOR"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#writeToParcel(android.os.Parcel, int)"
          },
          "setFlag": {
            "!type": "fn(flag: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#setFlag(java.lang.String)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setInterfaceDown": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#setInterfaceDown()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#describeContents()"
          },
          "getLinkAddress": {
            "!type": "fn() -> +android.net.LinkAddress",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#getLinkAddress()"
          },
          "setHardwareAddress": {
            "!type": "fn(hwAddr: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#setHardwareAddress(java.lang.String)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getHardwareAddress": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#getHardwareAddress()"
          },
          "hasFlag": {
            "!type": "fn(flag: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#hasFlag(java.lang.String)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#toString()"
          },
          "clearFlag": {
            "!type": "fn(flag: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#clearFlag(java.lang.String)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setInterfaceUp": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#setInterfaceUp()"
          },
          "getFlags": {
            "!type": "fn() -> +java.lang.Iterable",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#getFlags()"
          },
          "isActive": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#isActive()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "setLinkAddress": {
            "!type": "fn(addr: +android.net.LinkAddress) -> void",
            "!url": "http://developer.android.com/reference/android/net/InterfaceConfiguration.html#setLinkAddress(android.net.LinkAddress)"
          }
        }
      },
      "NetworkStats": {
        "!url": "http://developer.android.com/reference/android/net/NetworkStats.html",
        "!type": "fn(elapsedRealtime: +java.lang.Long, initialSize: number)",
        "Entry": {
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html",
          "!type": "fn()",
          "prototype": {
            "isNegative": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html#isNegative()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html#toString()"
            },
            "equals": {
              "!type": "fn(o: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html#equals(java.lang.Object)"
            },
            "isEmpty": {
              "!type": "fn() -> bool",
              "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html#isEmpty()"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            },
            "add": {
              "!type": "fn(another: +android.net.NetworkStats.Entry) -> void",
              "!url": "http://developer.android.com/reference/android/net/NetworkStats.Entry.html#add(android.net.NetworkStats.Entry)"
            }
          }
        },
        "SET_DEBUG_START": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_DEBUG_START"
        },
        "SET_DEFAULT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_DEFAULT"
        },
        "SET_DBG_VPN_OUT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_DBG_VPN_OUT"
        },
        "UID_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#UID_ALL"
        },
        "TAG_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#TAG_NONE"
        },
        "IFACE_ALL": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#IFACE_ALL"
        },
        "SET_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_ALL"
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#CREATOR"
        },
        "SET_FOREGROUND": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_FOREGROUND"
        },
        "TAG_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#TAG_ALL"
        },
        "SET_DBG_VPN_IN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#SET_DBG_VPN_IN"
        },
        "setToCheckinString": {
          "!type": "fn(set: number) -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#setToCheckinString(int)"
        },
        "tagToString": {
          "!type": "fn(tag: number) -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#tagToString(int)"
        },
        "setMatches": {
          "!type": "fn(querySet: number, dataSet: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#setMatches(int, int)"
        },
        "subtract": {
          "!type": "fn(left: +android.net.NetworkStats, right: +android.net.NetworkStats, observer: +android.net.NetworkStats.NonMonotonicObserver, cookie: +java.lang.Object) -> +android.net.NetworkStats",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#subtract(android.net.NetworkStats, android.net.NetworkStats, android.net.NetworkStats.NonMonotonicObserver, C)"
        },
        "setToString": {
          "!type": "fn(set: number) -> string",
          "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#setToString(int)"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#writeToParcel(android.os.Parcel, int)"
          },
          "getValues": {
            "!type": "fn(i: number, recycle: +android.net.NetworkStats.Entry) -> +android.net.NetworkStats.Entry",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getValues(int, android.net.NetworkStats.Entry)"
          },
          "withoutUids": {
            "!type": "fn(uids: +java.newArray) -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#withoutUids(int[])"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getElapsedRealtimeAge": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getElapsedRealtimeAge()"
          },
          "addValues": {
            "!type": "fn(iface: string, uid: number, set: number, tag: number, rxBytes: +java.lang.Long, rxPackets: +java.lang.Long, txBytes: +java.lang.Long, txPackets: +java.lang.Long, operations: +java.lang.Long) -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#addValues(java.lang.String, int, int, int, long, long, long, long, long)"
          },
          "findIndex": {
            "!type": "fn(iface: string, uid: number, set: number, tag: number) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#findIndex(java.lang.String, int, int, int)"
          },
          "getUniqueUids": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getUniqueUids()"
          },
          "findIndexHinted": {
            "!type": "fn(iface: string, uid: number, set: number, tag: number, hintIndex: number) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#findIndexHinted(java.lang.String, int, int, int, int)"
          },
          "groupedByIface": {
            "!type": "fn() -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#groupedByIface()"
          },
          "getTotalPackets": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getTotalPackets()"
          },
          "dump": {
            "!type": "fn(prefix: string, pw: +java.io.PrintWriter) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#dump(java.lang.String, java.io.PrintWriter)"
          },
          "internalSize": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#internalSize()"
          },
          "getTotalBytes": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getTotalBytes()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#describeContents()"
          },
          "getTotal": {
            "!type": "fn(recycle: +android.net.NetworkStats.Entry) -> +android.net.NetworkStats.Entry",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getTotal(android.net.NetworkStats.Entry)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "combineAllValues": {
            "!type": "fn(another: +android.net.NetworkStats) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#combineAllValues(android.net.NetworkStats)"
          },
          "getElapsedRealtime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getElapsedRealtime()"
          },
          "migrateTun": {
            "!type": "fn(tunUid: number, tunIface: string, underlyingIface: string) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#migrateTun(int, java.lang.String, java.lang.String)"
          },
          "size": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#size()"
          },
          "combineValues": {
            "!type": "fn(iface: string, uid: number, tag: number, rxBytes: +java.lang.Long, rxPackets: +java.lang.Long, txBytes: +java.lang.Long, txPackets: +java.lang.Long, operations: +java.lang.Long) -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#combineValues(java.lang.String, int, int, long, long, long, long, long)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#toString()"
          },
          "getUniqueIfaces": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getUniqueIfaces()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "groupedByUid": {
            "!type": "fn() -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#groupedByUid()"
          },
          "subtract": {
            "!type": "fn(right: +android.net.NetworkStats) -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#subtract(android.net.NetworkStats)"
          },
          "addIfaceValues": {
            "!type": "fn(iface: string, rxBytes: +java.lang.Long, rxPackets: +java.lang.Long, txBytes: +java.lang.Long, txPackets: +java.lang.Long) -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#addIfaceValues(java.lang.String, long, long, long, long)"
          },
          "clone": {
            "!type": "fn() -> +android.net.NetworkStats",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#clone()"
          },
          "getTotalIncludingTags": {
            "!type": "fn(recycle: +android.net.NetworkStats.Entry) -> +android.net.NetworkStats.Entry",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#getTotalIncludingTags(android.net.NetworkStats.Entry)"
          },
          "setElapsedRealtime": {
            "!type": "fn(time: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#setElapsedRealtime(long)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "spliceOperationsFrom": {
            "!type": "fn(stats: +android.net.NetworkStats) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStats.html#spliceOperationsFrom(android.net.NetworkStats)"
          }
        }
      },
      "RouteInfo": {
        "!url": "http://developer.android.com/reference/android/net/RouteInfo.html",
        "!type": "fn(destination: +android.net.IpPrefix, gateway: +java.net.InetAddress, iface: string, type: number)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#CREATOR"
        },
        "RTN_UNICAST": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#RTN_UNICAST"
        },
        "RTN_THROW": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#RTN_THROW"
        },
        "RTN_UNREACHABLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#RTN_UNREACHABLE"
        },
        "makeHostRoute": {
          "!type": "fn(host: +java.net.InetAddress, iface: string) -> +android.net.RouteInfo",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#makeHostRoute(java.net.InetAddress, java.lang.String)"
        },
        "selectBestRoute": {
          "!type": "fn(routes: +java.util.Collection, dest: +java.net.InetAddress) -> +android.net.RouteInfo",
          "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#selectBestRoute(java.util.Collection, java.net.InetAddress)"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "matches": {
            "!type": "fn(destination: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#matches(java.net.InetAddress)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getInterface": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#getInterface()"
          },
          "hasGateway": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#hasGateway()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#describeContents()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#toString()"
          },
          "isDefaultRoute": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#isDefaultRoute()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#hashCode()"
          },
          "getType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#getType()"
          },
          "getDestinationLinkAddress": {
            "!type": "fn() -> +android.net.LinkAddress",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#getDestinationLinkAddress()"
          },
          "getGateway": {
            "!type": "fn() -> +java.net.InetAddress",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#getGateway()"
          },
          "isHostRoute": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#isHostRoute()"
          },
          "getDestination": {
            "!type": "fn() -> +android.net.IpPrefix",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#getDestination()"
          },
          "isIPv6Default": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#isIPv6Default()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "isIPv4Default": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/RouteInfo.html#isIPv4Default()"
          }
        }
      },
      "LinkAddress": {
        "!url": "http://developer.android.com/reference/android/net/LinkAddress.html",
        "!type": "fn(address: +java.net.InetAddress, prefixLength: number, flags: number, scope: number)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#CREATOR"
        },
        "prototype": {
          "getPrefixLength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#getPrefixLength()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "isSameAddressAs": {
            "!type": "fn(other: +android.net.LinkAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#isSameAddressAs(android.net.LinkAddress)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#describeContents()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getNetworkPrefixLength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#getNetworkPrefixLength()"
          },
          "getScope": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#getScope()"
          },
          "getAddress": {
            "!type": "fn() -> +java.net.InetAddress",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#getAddress()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#writeToParcel(android.os.Parcel, int)"
          },
          "isGlobalPreferred": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#isGlobalPreferred()"
          },
          "getFlags": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#getFlags()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkAddress.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkTest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testGetNetworkHandle": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testGetNetworkHandle()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testBindSocketOfLocalSocketThrows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testBindSocketOfLocalSocketThrows()"
          },
          "testZeroIsObviousForDebugging": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testZeroIsObviousForDebugging()"
          },
          "testBindSocketOfConnectedDatagramSocketThrows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testBindSocketOfConnectedDatagramSocketThrows()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "testBindSocketOfNonSocketFdThrows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testBindSocketOfNonSocketFdThrows()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testBindSocketOfInvalidFdThrows": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkTest.html#testBindSocketOfInvalidFdThrows()"
          }
        }
      },
      "NetworkPolicy": {
        "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html",
        "!type": "fn(template: +android.net.NetworkTemplate, cycleDay: number, cycleTimezone: string, warningBytes: +java.lang.Long, limitBytes: +java.lang.Long, metered: bool)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#CREATOR"
        },
        "CYCLE_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#CYCLE_NONE"
        },
        "SNOOZE_NEVER": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#SNOOZE_NEVER"
        },
        "LIMIT_DISABLED": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#LIMIT_DISABLED"
        },
        "WARNING_DISABLED": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#WARNING_DISABLED"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#describeContents()"
          },
          "compareTo": {
            "!type": "fn(another: +android.net.NetworkPolicy) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#compareTo(android.net.NetworkPolicy)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hasCycle": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#hasCycle()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#writeToParcel(android.os.Parcel, int)"
          },
          "isOverLimit": {
            "!type": "fn(totalBytes: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#isOverLimit(long)"
          },
          "isOverWarning": {
            "!type": "fn(totalBytes: +java.lang.Long) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#isOverWarning(long)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "clearSnooze": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicy.html#clearSnooze()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkState": {
        "!url": "http://developer.android.com/reference/android/net/NetworkState.html",
        "!type": "fn(networkInfo: +android.net.NetworkInfo, linkProperties: +android.net.LinkProperties, networkCapabilities: +android.net.NetworkCapabilities, network: +android.net.Network, subscriberId: string, networkId: string)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkState.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkState.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkState.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "NetworkStatsHistoryTest": {
        "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html",
        "!type": "fn()",
        "prototype": {
          "testRecordOverlapBuckets": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordOverlapBuckets()"
          },
          "testIndexBeforeAfter": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testIndexBeforeAfter()"
          },
          "testIntersects": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testIntersects()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setTestContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
          },
          "getTestContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
          },
          "testIgnoreFieldsRecordIn": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testIgnoreFieldsRecordIn()"
          },
          "testSerialize": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testSerialize()"
          },
          "assertWritingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "testRecordEntireOverlapVaryingBuckets": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordEntireOverlapVaryingBuckets()"
          },
          "testAndroidTestCaseSetupProperly": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
          },
          "getContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
          },
          "testRecordEntireGapIdentical": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordEntireGapIdentical()"
          },
          "testRemove": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRemove()"
          },
          "testTotalData": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testTotalData()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testIgnoreFields": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testIgnoreFields()"
          },
          "testReadOriginalVersion": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testReadOriginalVersion()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testRecordSingleBucket": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordSingleBucket()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "assertReadingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "assertActivityRequiresPermission": {
            "!type": "fn(packageName: string, className: string, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "testRecordGapBuckets": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordGapBuckets()"
          },
          "testRecordTouchingBuckets": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordTouchingBuckets()"
          },
          "testIgnoreFieldsRecordOut": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testIgnoreFieldsRecordOut()"
          },
          "setContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
          },
          "testVarLong": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testVarLong()"
          },
          "testRecordEqualBuckets": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testRecordEqualBuckets()"
          },
          "testFuzzing": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsHistoryTest.html#testFuzzing()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "NetworkKey": {
        "!url": "http://developer.android.com/reference/android/net/NetworkKey.html",
        "!type": "fn(wifiKey: +android.net.WifiKey)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#CREATOR"
        },
        "TYPE_WIFI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#TYPE_WIFI"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkKey.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "SntpClient": {
        "!url": "http://developer.android.com/reference/android/net/SntpClient.html",
        "!type": "fn()",
        "prototype": {
          "getRoundTripTime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/SntpClient.html#getRoundTripTime()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "requestTime": {
            "!type": "fn(host: string, timeout: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/SntpClient.html#requestTime(java.lang.String, int)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getNtpTimeReference": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/SntpClient.html#getNtpTimeReference()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getNtpTime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/SntpClient.html#getNtpTime()"
          }
        }
      },
      "NetworkPolicyManager": {
        "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html",
        "!type": "fn(context: +android.content.Context, service: INetworkPolicyManager)",
        "FIREWALL_CHAIN_NAME_NONE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_NAME_NONE"
        },
        "FIREWALL_CHAIN_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_NONE"
        },
        "FIREWALL_RULE_DENY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_RULE_DENY"
        },
        "RULE_REJECT_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#RULE_REJECT_ALL"
        },
        "FIREWALL_CHAIN_DOZABLE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_DOZABLE"
        },
        "FIREWALL_CHAIN_NAME_STANDBY": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_NAME_STANDBY"
        },
        "POLICY_NONE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#POLICY_NONE"
        },
        "FIREWALL_RULE_ALLOW": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_RULE_ALLOW"
        },
        "RULE_REJECT_METERED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#RULE_REJECT_METERED"
        },
        "POLICY_ALLOW_BACKGROUND_BATTERY_SAVE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#POLICY_ALLOW_BACKGROUND_BATTERY_SAVE"
        },
        "POLICY_REJECT_METERED_BACKGROUND": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#POLICY_REJECT_METERED_BACKGROUND"
        },
        "FIREWALL_RULE_DEFAULT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_RULE_DEFAULT"
        },
        "FIREWALL_TYPE_BLACKLIST": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_TYPE_BLACKLIST"
        },
        "FIREWALL_TYPE_WHITELIST": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_TYPE_WHITELIST"
        },
        "RULE_ALLOW_ALL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#RULE_ALLOW_ALL"
        },
        "FIREWALL_CHAIN_STANDBY": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_STANDBY"
        },
        "FIREWALL_CHAIN_NAME_DOZABLE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#FIREWALL_CHAIN_NAME_DOZABLE"
        },
        "EXTRA_NETWORK_TEMPLATE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#EXTRA_NETWORK_TEMPLATE"
        },
        "snapToCycleDay": {
          "!type": "fn(time: +android.text.format.Time, cycleDay: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#snapToCycleDay(android.text.format.Time, int)"
        },
        "isUidValidForPolicy": {
          "!type": "fn(context: +android.content.Context, uid: number) -> bool",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#isUidValidForPolicy(android.content.Context, int)"
        },
        "computeNextCycleBoundary": {
          "!type": "fn(currentTime: +java.lang.Long, policy: +android.net.NetworkPolicy) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#computeNextCycleBoundary(long, android.net.NetworkPolicy)"
        },
        "dumpRules": {
          "!type": "fn(fout: +java.io.PrintWriter, rules: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#dumpRules(java.io.PrintWriter, int)"
        },
        "computeLastCycleBoundary": {
          "!type": "fn(currentTime: +java.lang.Long, policy: +android.net.NetworkPolicy) -> +java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#computeLastCycleBoundary(long, android.net.NetworkPolicy)"
        },
        "dumpPolicy": {
          "!type": "fn(fout: +java.io.PrintWriter, policy: number) -> void",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#dumpPolicy(java.io.PrintWriter, int)"
        },
        "from": {
          "!type": "fn(context: +android.content.Context) -> +android.net.NetworkPolicyManager",
          "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#from(android.content.Context)"
        },
        "prototype": {
          "setRestrictBackground": {
            "!type": "fn(restrictBackground: bool) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#setRestrictBackground(boolean)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "factoryReset": {
            "!type": "fn(subscriber: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#factoryReset(java.lang.String)"
          },
          "getRestrictBackground": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#getRestrictBackground()"
          },
          "getUidsWithPolicy": {
            "!type": "fn(policy: number) -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#getUidsWithPolicy(int)"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "addUidPolicy": {
            "!type": "fn(uid: number, policy: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#addUidPolicy(int, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setNetworkPolicies": {
            "!type": "fn(policies: +java.newArray) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#setNetworkPolicies(android.net.NetworkPolicy[])"
          },
          "registerListener": {
            "!type": "fn(listener: INetworkPolicyListener) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#registerListener(INetworkPolicyListener)"
          },
          "getNetworkPolicies": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#getNetworkPolicies()"
          },
          "removeUidPolicy": {
            "!type": "fn(uid: number, policy: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#removeUidPolicy(int, int)"
          },
          "getUidPolicy": {
            "!type": "fn(uid: number) -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#getUidPolicy(int)"
          },
          "setUidPolicy": {
            "!type": "fn(uid: number, policy: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#setUidPolicy(int, int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "unregisterListener": {
            "!type": "fn(listener: INetworkPolicyListener) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkPolicyManager.html#unregisterListener(INetworkPolicyListener)"
          }
        }
      },
      "NetworkStatsBenchmark": {
        "!url": "http://developer.android.com/reference/android/net/NetworkStatsBenchmark.html",
        "!type": "fn()",
        "prototype": {
          "timeClone": {
            "!type": "fn(reps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsBenchmark.html#timeClone(int)"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "timeMigrateTun": {
            "!type": "fn(reps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkStatsBenchmark.html#timeMigrateTun(int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "WebAddress": {
        "!url": "http://developer.android.com/reference/android/net/WebAddress.html",
        "!type": "fn(address: string)",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#toString()"
          },
          "getPort": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#getPort()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setAuthInfo": {
            "!type": "fn(authInfo: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#setAuthInfo(java.lang.String)"
          },
          "setHost": {
            "!type": "fn(host: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#setHost(java.lang.String)"
          },
          "setPath": {
            "!type": "fn(path: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#setPath(java.lang.String)"
          },
          "getAuthInfo": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#getAuthInfo()"
          },
          "setPort": {
            "!type": "fn(port: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#setPort(int)"
          },
          "getScheme": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#getScheme()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getHost": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#getHost()"
          },
          "setScheme": {
            "!type": "fn(scheme: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#setScheme(java.lang.String)"
          },
          "getPath": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WebAddress.html#getPath()"
          }
        }
      },
      "DhcpInfo": {
        "!url": "http://developer.android.com/reference/android/net/DhcpInfo.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/DhcpInfo.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/DhcpInfo.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/DhcpInfo.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "MailTo": {
        "!url": "http://developer.android.com/reference/android/net/MailTo.html",
        "MAILTO_SCHEME": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/MailTo.html#MAILTO_SCHEME"
        },
        "isMailTo": {
          "!type": "fn(url: string) -> bool",
          "!url": "http://developer.android.com/reference/android/net/MailTo.html#isMailTo(java.lang.String)"
        },
        "parse": {
          "!type": "fn(url: string) -> +android.net.MailTo",
          "!url": "http://developer.android.com/reference/android/net/MailTo.html#parse(java.lang.String)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getCc": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#getCc()"
          },
          "getSubject": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#getSubject()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getBody": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#getBody()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getTo": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#getTo()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "getHeaders": {
            "!type": "fn() -> +java.util.Map",
            "!url": "http://developer.android.com/reference/android/net/MailTo.html#getHeaders()"
          }
        }
      },
      "StaticIpConfigurationTest": {
        "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testHashCodeAndEquals": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html#testHashCodeAndEquals()"
          },
          "testConstructor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html#testConstructor()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "testToLinkProperties": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html#testToLinkProperties()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testParceling": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html#testParceling()"
          },
          "testCopyAndClear": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/StaticIpConfigurationTest.html#testCopyAndClear()"
          }
        }
      },
      "DhcpStateMachine": {
        "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html",
        "DHCP_FAILURE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#DHCP_FAILURE"
        },
        "CMD_RENEW_DHCP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_RENEW_DHCP"
        },
        "CMD_PRE_DHCP_ACTION_COMPLETE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_PRE_DHCP_ACTION_COMPLETE"
        },
        "CMD_ON_QUIT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_ON_QUIT"
        },
        "NOT_HANDLED": {
          "!type": "bool",
          "!url": ""
        },
        "CMD_PRE_DHCP_ACTION": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_PRE_DHCP_ACTION"
        },
        "CMD_START_DHCP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_START_DHCP"
        },
        "DHCP_SUCCESS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#DHCP_SUCCESS"
        },
        "CMD_POST_DHCP_ACTION": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_POST_DHCP_ACTION"
        },
        "HANDLED": {
          "!type": "bool",
          "!url": ""
        },
        "CMD_STOP_DHCP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#CMD_STOP_DHCP"
        },
        "makeDhcpStateMachine": {
          "!type": "fn(context: +android.content.Context, controller: +com.android.internal.util.StateMachine, intf: string) -> +android.net.DhcpStateMachine",
          "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#makeDhcpStateMachine(android.content.Context, com.android.internal.util.StateMachine, java.lang.String)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "sendMessage": {
            "!type": "fn(what: number) -> void",
            "!url": ""
          },
          "getLogRecSize": {
            "!type": "fn() -> number",
            "!url": ""
          },
          "start": {
            "!type": "fn() -> void",
            "!url": ""
          },
          "getHandler": {
            "!type": "fn() -> +android.os.Handler",
            "!url": ""
          },
          "dump": {
            "!type": "fn(fd: +java.io.FileDescriptor, pw: +java.io.PrintWriter, args: +java.newArray) -> void",
            "!url": ""
          },
          "setLogRecSize": {
            "!type": "fn(maxSize: number) -> void",
            "!url": ""
          },
          "registerForPreDhcpNotification": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#registerForPreDhcpNotification()"
          },
          "copyLogRecs": {
            "!type": "fn() -> +java.util.Collection",
            "!url": ""
          },
          "obtainMessage": {
            "!type": "fn() -> +android.os.Message",
            "!url": ""
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setDbg": {
            "!type": "fn(dbg: bool) -> void",
            "!url": ""
          },
          "getName": {
            "!type": "fn() -> string",
            "!url": ""
          },
          "getLogRec": {
            "!type": "fn(index: number) -> +com.android.internal.util.StateMachine.LogRec",
            "!url": ""
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": ""
          },
          "isDbg": {
            "!type": "fn() -> bool",
            "!url": ""
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "doQuit": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/DhcpStateMachine.html#doQuit()"
          },
          "sendMessageDelayed": {
            "!type": "fn(what: number, delayMillis: +java.lang.Long) -> void",
            "!url": ""
          },
          "setLogOnlyTransitions": {
            "!type": "fn(enable: bool) -> void",
            "!url": ""
          },
          "getLogRecCount": {
            "!type": "fn() -> number",
            "!url": ""
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "IpPrefix": {
        "!url": "http://developer.android.com/reference/android/net/IpPrefix.html",
        "!type": "fn(address: +java.newArray, prefixLength: number)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#CREATOR"
        },
        "prototype": {
          "getPrefixLength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#getPrefixLength()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#toString()"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#describeContents()"
          },
          "contains": {
            "!type": "fn(address: +java.net.InetAddress) -> bool",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#contains(java.net.InetAddress)"
          },
          "getRawAddress": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#getRawAddress()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "getAddress": {
            "!type": "fn() -> +java.net.InetAddress",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#getAddress()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/IpPrefix.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "LinkAddressTest": {
        "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html",
        "!type": "fn()",
        "prototype": {
          "testIsGlobalPreferred": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testIsGlobalPreferred()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setTestContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setTestContext(android.content.Context)"
          },
          "getTestContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getTestContext()"
          },
          "assertWritingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "testAddressScopes": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testAddressScopes()"
          },
          "testAndroidTestCaseSetupProperly": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#testAndroidTestCaseSetupProperly()"
          },
          "testParceling": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testParceling()"
          },
          "getContext": {
            "!type": "fn() -> +android.content.Context",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#getContext()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testConstants": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testConstants()"
          },
          "testConstructors": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testConstructors()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "assertReadingContentUriRequiresPermission": {
            "!type": "fn(uri: +android.net.Uri, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)"
          },
          "assertActivityRequiresPermission": {
            "!type": "fn(packageName: string, className: string, permission: string) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setContext": {
            "!type": "fn(context: +android.content.Context) -> void",
            "!url": "http://developer.android.com/reference/android/test/AndroidTestCase.html#setContext(android.content.Context)"
          },
          "testHashCode": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testHashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "testEqualsAndSameAddressAs": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkAddressTest.html#testEqualsAndSameAddressAs()"
          }
        }
      },
      "NetworkCapabilities": {
        "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html",
        "!type": "fn()",
        "NET_CAPABILITY_DUN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_DUN"
        },
        "NET_CAPABILITY_XCAP": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_XCAP"
        },
        "NET_CAPABILITY_MMS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_MMS"
        },
        "NET_CAPABILITY_TRUSTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_TRUSTED"
        },
        "NET_CAPABILITY_VALIDATED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_VALIDATED"
        },
        "NET_CAPABILITY_NOT_METERED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_METERED"
        },
        "NET_CAPABILITY_CAPTIVE_PORTAL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_CAPTIVE_PORTAL"
        },
        "TRANSPORT_WIFI": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_WIFI"
        },
        "NET_CAPABILITY_IA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_IA"
        },
        "NET_CAPABILITY_INTERNET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_INTERNET"
        },
        "NET_CAPABILITY_SUPL": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_SUPL"
        },
        "NET_CAPABILITY_RCS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_RCS"
        },
        "NET_CAPABILITY_NOT_VPN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_VPN"
        },
        "NET_CAPABILITY_NOT_RESTRICTED": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_RESTRICTED"
        },
        "TRANSPORT_CELLULAR": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_CELLULAR"
        },
        "NET_CAPABILITY_EIMS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_EIMS"
        },
        "TRANSPORT_BLUETOOTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_BLUETOOTH"
        },
        "NET_CAPABILITY_WIFI_P2P": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_WIFI_P2P"
        },
        "TRANSPORT_VPN": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_VPN"
        },
        "TRANSPORT_ETHERNET": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_ETHERNET"
        },
        "NET_CAPABILITY_FOTA": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_FOTA"
        },
        "NET_CAPABILITY_CBS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_CBS"
        },
        "NET_CAPABILITY_IMS": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_IMS"
        },
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#CREATOR"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#writeToParcel(android.os.Parcel, int)"
          },
          "getNetworkSpecifier": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#getNetworkSpecifier()"
          },
          "clearAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#clearAll()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "getCapabilities": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#getCapabilities()"
          },
          "combineCapabilities": {
            "!type": "fn(nc: +android.net.NetworkCapabilities) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#combineCapabilities(android.net.NetworkCapabilities)"
          },
          "setNetworkSpecifier": {
            "!type": "fn(networkSpecifier: string) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#setNetworkSpecifier(java.lang.String)"
          },
          "hasCapability": {
            "!type": "fn(capability: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#hasCapability(int)"
          },
          "addCapability": {
            "!type": "fn(capability: number) -> +android.net.NetworkCapabilities",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#addCapability(int)"
          },
          "getTransportTypes": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#getTransportTypes()"
          },
          "equalsTransportTypes": {
            "!type": "fn(nc: +android.net.NetworkCapabilities) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#equalsTransportTypes(android.net.NetworkCapabilities)"
          },
          "equalsNetCapabilities": {
            "!type": "fn(nc: +android.net.NetworkCapabilities) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#equalsNetCapabilities(android.net.NetworkCapabilities)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#describeContents()"
          },
          "maybeMarkCapabilitiesRestricted": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#maybeMarkCapabilitiesRestricted()"
          },
          "getLinkUpstreamBandwidthKbps": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#getLinkUpstreamBandwidthKbps()"
          },
          "removeCapability": {
            "!type": "fn(capability: number) -> +android.net.NetworkCapabilities",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#removeCapability(int)"
          },
          "equals": {
            "!type": "fn(obj: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "hasTransport": {
            "!type": "fn(transportType: number) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#hasTransport(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#hashCode()"
          },
          "setLinkUpstreamBandwidthKbps": {
            "!type": "fn(upKbps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#setLinkUpstreamBandwidthKbps(int)"
          },
          "getLinkDownstreamBandwidthKbps": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#getLinkDownstreamBandwidthKbps()"
          },
          "addTransportType": {
            "!type": "fn(transportType: number) -> +android.net.NetworkCapabilities",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#addTransportType(int)"
          },
          "removeTransportType": {
            "!type": "fn(transportType: number) -> +android.net.NetworkCapabilities",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#removeTransportType(int)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "satisfiedByNetworkCapabilities": {
            "!type": "fn(nc: +android.net.NetworkCapabilities) -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)"
          },
          "setLinkDownstreamBandwidthKbps": {
            "!type": "fn(downKbps: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/NetworkCapabilities.html#setLinkDownstreamBandwidthKbps(int)"
          }
        }
      },
      "LinkQualityInfo": {
        "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html",
        "!type": "fn()",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#CREATOR"
        },
        "UNKNOWN_INT": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_INT"
        },
        "NORMALIZED_MIN_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MIN_SIGNAL_STRENGTH"
        },
        "NORMALIZED_SIGNAL_STRENGTH_RANGE": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_SIGNAL_STRENGTH_RANGE"
        },
        "UNKNOWN_LONG": {
          "!type": "+java.lang.Long",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#UNKNOWN_LONG"
        },
        "NORMALIZED_MAX_SIGNAL_STRENGTH": {
          "!type": "number",
          "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#NORMALIZED_MAX_SIGNAL_STRENGTH"
        },
        "prototype": {
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#writeToParcel(android.os.Parcel, int)"
          },
          "getNetworkType": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNetworkType()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "setNormalizedSignalStrength": {
            "!type": "fn(normalizedSignalStrength: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNormalizedSignalStrength(int)"
          },
          "setTheoreticalLatency": {
            "!type": "fn(theoreticalLatency: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalLatency(int)"
          },
          "setDataSampleDuration": {
            "!type": "fn(dataSampleDuration: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setDataSampleDuration(int)"
          },
          "setLastDataSampleTime": {
            "!type": "fn(lastDataSampleTime: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setLastDataSampleTime(long)"
          },
          "getNormalizedSignalStrength": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getNormalizedSignalStrength()"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#describeContents()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "getTheoreticalLatency": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalLatency()"
          },
          "getTheoreticalRxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalRxBandwidth()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setTheoreticalTxBandwidth": {
            "!type": "fn(theoreticalTxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalTxBandwidth(int)"
          },
          "setNetworkType": {
            "!type": "fn(networkType: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setNetworkType(int)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "setPacketCount": {
            "!type": "fn(packetCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketCount(long)"
          },
          "getPacketErrorCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketErrorCount()"
          },
          "getPacketCount": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getPacketCount()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "setTheoreticalRxBandwidth": {
            "!type": "fn(theoreticalRxBandwidth: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setTheoreticalRxBandwidth(int)"
          },
          "setPacketErrorCount": {
            "!type": "fn(packetErrorCount: +java.lang.Long) -> void",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#setPacketErrorCount(long)"
          },
          "getTheoreticalTxBandwidth": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getTheoreticalTxBandwidth()"
          },
          "getDataSampleDuration": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getDataSampleDuration()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "getLastDataSampleTime": {
            "!type": "fn() -> +java.lang.Long",
            "!url": "http://developer.android.com/reference/android/net/LinkQualityInfo.html#getLastDataSampleTime()"
          }
        }
      },
      "IpPrefixTest": {
        "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "testHashCode": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testHashCode()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testTruncation": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testTruncation()"
          },
          "testConstructor": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testConstructor()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "assertParcelingIsLossless": {
            "!type": "fn(p: +android.net.IpPrefix) -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#assertParcelingIsLossless(android.net.IpPrefix)"
          },
          "passThroughParcel": {
            "!type": "fn(p: +android.net.IpPrefix) -> +android.net.IpPrefix",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#passThroughParcel(android.net.IpPrefix)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testParceling": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testParceling()"
          },
          "testContains": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testContains()"
          },
          "testEquals": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testEquals()"
          },
          "testMappedAddressesAreBroken": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/IpPrefixTest.html#testMappedAddressesAreBroken()"
          }
        }
      },
      "BaseDhcpStateMachine": {
        "!url": "http://developer.android.com/reference/android/net/BaseDhcpStateMachine.html",
        "NOT_HANDLED": {
          "!type": "bool",
          "!url": ""
        },
        "HANDLED": {
          "!type": "bool",
          "!url": ""
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "sendMessage": {
            "!type": "fn(what: number) -> void",
            "!url": ""
          },
          "getLogRecSize": {
            "!type": "fn() -> number",
            "!url": ""
          },
          "start": {
            "!type": "fn() -> void",
            "!url": ""
          },
          "getHandler": {
            "!type": "fn() -> +android.os.Handler",
            "!url": ""
          },
          "dump": {
            "!type": "fn(fd: +java.io.FileDescriptor, pw: +java.io.PrintWriter, args: +java.newArray) -> void",
            "!url": ""
          },
          "setLogRecSize": {
            "!type": "fn(maxSize: number) -> void",
            "!url": ""
          },
          "registerForPreDhcpNotification": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/BaseDhcpStateMachine.html#registerForPreDhcpNotification()"
          },
          "copyLogRecs": {
            "!type": "fn() -> +java.util.Collection",
            "!url": ""
          },
          "obtainMessage": {
            "!type": "fn() -> +android.os.Message",
            "!url": ""
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "setDbg": {
            "!type": "fn(dbg: bool) -> void",
            "!url": ""
          },
          "getName": {
            "!type": "fn() -> string",
            "!url": ""
          },
          "getLogRec": {
            "!type": "fn(index: number) -> +com.android.internal.util.StateMachine.LogRec",
            "!url": ""
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": ""
          },
          "isDbg": {
            "!type": "fn() -> bool",
            "!url": ""
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "doQuit": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/BaseDhcpStateMachine.html#doQuit()"
          },
          "sendMessageDelayed": {
            "!type": "fn(what: number, delayMillis: +java.lang.Long) -> void",
            "!url": ""
          },
          "setLogOnlyTransitions": {
            "!type": "fn(enable: bool) -> void",
            "!url": ""
          },
          "getLogRecCount": {
            "!type": "fn() -> number",
            "!url": ""
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          }
        }
      },
      "PacProxySelector": {
        "!url": "http://developer.android.com/reference/android/net/PacProxySelector.html",
        "!type": "fn()",
        "PROXY_SERVICE": {
          "!type": "string",
          "!url": "http://developer.android.com/reference/android/net/PacProxySelector.html#PROXY_SERVICE"
        },
        "setDefault": {
          "!type": "fn(selector: +java.net.ProxySelector) -> void",
          "!url": "http://developer.android.com/reference/java/net/ProxySelector.html#setDefault(java.net.ProxySelector)"
        },
        "getDefault": {
          "!type": "fn() -> +java.net.ProxySelector",
          "!url": "http://developer.android.com/reference/java/net/ProxySelector.html#getDefault()"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "select": {
            "!type": "fn(uri: +java.net.URI) -> +java.util.List",
            "!url": "http://developer.android.com/reference/android/net/PacProxySelector.html#select(java.net.URI)"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "connectFailed": {
            "!type": "fn(uri: +java.net.URI, address: +java.net.SocketAddress, failure: +java.io.IOException) -> void",
            "!url": "http://developer.android.com/reference/android/net/PacProxySelector.html#connectFailed(java.net.URI, java.net.SocketAddress, java.io.IOException)"
          }
        }
      },
      "UidRange": {
        "!url": "http://developer.android.com/reference/android/net/UidRange.html",
        "!type": "fn(startUid: number, stopUid: number)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/UidRange.html#CREATOR"
        },
        "createForUser": {
          "!type": "fn(userId: number) -> +android.net.UidRange",
          "!url": "http://developer.android.com/reference/android/net/UidRange.html#createForUser(int)"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(dest: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#hashCode()"
          },
          "getStartUser": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/UidRange.html#getStartUser()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "UriMatcherTest": {
        "!url": "http://developer.android.com/reference/android/net/UriMatcherTest.html",
        "!type": "fn()",
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "testContentUris": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriMatcherTest.html#testContentUris()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "testContentUrisWithLeadingSlash": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/android/net/UriMatcherTest.html#testContentUrisWithLeadingSlash()"
          }
        }
      },
      "NetworkConfig": {
        "!url": "http://developer.android.com/reference/android/net/NetworkConfig.html",
        "!type": "fn(init: string)",
        "prototype": {
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "isDefault": {
            "!type": "fn() -> bool",
            "!url": "http://developer.android.com/reference/android/net/NetworkConfig.html#isDefault()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          }
        }
      },
      "WifiKey": {
        "!url": "http://developer.android.com/reference/android/net/WifiKey.html",
        "!type": "fn(ssid: string, bssid: string)",
        "CREATOR": {
          "!type": "+android.os.Parcelable.Creator",
          "!url": "http://developer.android.com/reference/android/net/WifiKey.html#CREATOR"
        },
        "prototype": {
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/WifiKey.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/android/net/WifiKey.html#equals(java.lang.Object)"
          },
          "describeContents": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/WifiKey.html#describeContents()"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "writeToParcel": {
            "!type": "fn(out: +android.os.Parcel, flags: number) -> void",
            "!url": "http://developer.android.com/reference/android/net/WifiKey.html#writeToParcel(android.os.Parcel, int)"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/android/net/WifiKey.html#hashCode()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      },
      "LocalSocketAddress": {
        "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.html",
        "!type": "fn(name: string, namespace: +android.net.LocalSocketAddress.Namespace)",
        "Namespace": {
          "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html",
          "FILESYSTEM": {
            "!type": "+android.net.LocalSocketAddress.Namespace",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#FILESYSTEM"
          },
          "ABSTRACT": {
            "!type": "+android.net.LocalSocketAddress.Namespace",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#ABSTRACT"
          },
          "RESERVED": {
            "!type": "+android.net.LocalSocketAddress.Namespace",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#RESERVED"
          },
          "valueOf": {
            "!type": "fn(name: string) -> +android.net.LocalSocketAddress.Namespace",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#valueOf(java.lang.String)"
          },
          "values": {
            "!type": "fn() -> +java.newArray",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#values()"
          },
          "getSharedConstants": {
            "!type": "fn(enumType: +java.lang.Class) -> +java.newArray",
            "!url": "http://developer.android.com/reference/java/lang/Enum.html#getSharedConstants(java.lang.Class)"
          },
          "prototype": {
            "name": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#name()"
            },
            "notifyAll": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
            },
            "toString": {
              "!type": "fn() -> string",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#toString()"
            },
            "equals": {
              "!type": "fn(other: +java.lang.Object) -> bool",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#equals(java.lang.Object)"
            },
            "compareTo": {
              "!type": "fn(o: +java.lang.Enum) -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#compareTo(E)"
            },
            "wait": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
            },
            "getDeclaringClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#getDeclaringClass()"
            },
            "ordinal": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#ordinal()"
            },
            "hashCode": {
              "!type": "fn() -> number",
              "!url": "http://developer.android.com/reference/java/lang/Enum.html#hashCode()"
            },
            "getClass": {
              "!type": "fn() -> +java.lang.Class",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
            },
            "notify": {
              "!type": "fn() -> void",
              "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
            }
          }
        },
        "prototype": {
          "getName": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.html#getName()"
          },
          "notifyAll": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notifyAll()"
          },
          "toString": {
            "!type": "fn() -> string",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#toString()"
          },
          "equals": {
            "!type": "fn(o: +java.lang.Object) -> bool",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#equals(java.lang.Object)"
          },
          "wait": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#wait()"
          },
          "hashCode": {
            "!type": "fn() -> number",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#hashCode()"
          },
          "getNamespace": {
            "!type": "fn() -> +android.net.LocalSocketAddress.Namespace",
            "!url": "http://developer.android.com/reference/android/net/LocalSocketAddress.html#getNamespace()"
          },
          "getClass": {
            "!type": "fn() -> +java.lang.Class",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#getClass()"
          },
          "notify": {
            "!type": "fn() -> void",
            "!url": "http://developer.android.com/reference/java/lang/Object.html#notify()"
          }
        }
      }
    }
  }
}